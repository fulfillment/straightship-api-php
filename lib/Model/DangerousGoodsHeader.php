<?php
/**
 * DangerousGoodsHeader
 *
 * PHP version 5
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Techship API v3
 *
 * API regions:  US: <a href='https://api-us.techship.io/api/docs/ui/index'>https://api-us.techship.io/api/docs/ui/index</a>  CA: <a href='https://api-ca.techship.io/api/docs/ui/index'>https://api-ca.techship.io/api/docs/ui/index</a>
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fulfillment\StraightShip\Client\Model;

use \ArrayAccess;
use Fulfillment\StraightShip\Client\ObjectSerializer;
use Fulfillment\StraightShip\Client\Model\DangerousGoodsSignatory;

/**
 * DangerousGoodsHeader Class Doc Comment
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DangerousGoodsHeader implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DangerousGoodsHeader';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'regulation_set' => 'string',
        'emergency_contact' => 'string',
        'emergency_phone' => 'string',
        'signatory' => DangerousGoodsSignatory::class,
        'offeror' => 'string',
        'additional_handling' => 'string',
        'accessibility' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'regulation_set' => null,
        'emergency_contact' => null,
        'emergency_phone' => null,
        'signatory' => null,
        'offeror' => null,
        'additional_handling' => null,
        'accessibility' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'regulation_set' => 'RegulationSet',
        'emergency_contact' => 'EmergencyContact',
        'emergency_phone' => 'EmergencyPhone',
        'signatory' => 'Signatory',
        'offeror' => 'Offeror',
        'additional_handling' => 'AdditionalHandling',
        'accessibility' => 'Accessibility'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'regulation_set' => 'setRegulationSet',
        'emergency_contact' => 'setEmergencyContact',
        'emergency_phone' => 'setEmergencyPhone',
        'signatory' => 'setSignatory',
        'offeror' => 'setOfferor',
        'additional_handling' => 'setAdditionalHandling',
        'accessibility' => 'setAccessibility'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'regulation_set' => 'getRegulationSet',
        'emergency_contact' => 'getEmergencyContact',
        'emergency_phone' => 'getEmergencyPhone',
        'signatory' => 'getSignatory',
        'offeror' => 'getOfferor',
        'additional_handling' => 'getAdditionalHandling',
        'accessibility' => 'getAccessibility'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REGULATION_SET_ADR = 'ADR';
    const REGULATION_SET_CFR = 'CFR';
    const REGULATION_SET_IATA = 'IATA';
    const REGULATION_SET_TDG = 'TDG';
    const REGULATION_SET_ORMD = 'ORMD';
    const ACCESSIBILITY_ACCESSIBLE = 'ACCESSIBLE';
    const ACCESSIBILITY_INACCESSIBLE = 'INACCESSIBLE';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRegulationSetAllowableValues()
    {
        return [
            self::REGULATION_SET_ADR,
            self::REGULATION_SET_CFR,
            self::REGULATION_SET_IATA,
            self::REGULATION_SET_TDG,
            self::REGULATION_SET_ORMD,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAccessibilityAllowableValues()
    {
        return [
            self::ACCESSIBILITY_ACCESSIBLE
            self::ACCESSIBILITY_INACCESSIBLE
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['regulation_set'] = isset($data['regulation_set']) ? $data['regulation_set'] : null;
        $this->container['emergency_contact'] = isset($data['emergency_contact']) ? $data['emergency_contact'] : null;
        $this->container['emergency_phone'] = isset($data['emergency_phone']) ? $data['emergency_phone'] : null;
        $this->container['signatory'] = isset($data['signatory']) ? $data['signatory'] : null;
        $this->container['offeror'] = isset($data['offeror']) ? $data['offeror'] : null;
        $this->container['additional_handling'] = isset($data['additional_handling']) ? $data['additional_handling'] : null;
        $this->container['accessibility'] = isset($data['accessibility']) ? $data['accessibility'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getRegulationSetAllowableValues();
        if (!is_null($this->container['regulation_set']) && !in_array($this->container['regulation_set'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'regulation_set', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAccessibilityAllowableValues();
        if (!is_null($this->container['accessibility']) && !in_array($this->container['accessibility'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'accessibility', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets regulation_set
     *
     * @return string
     */
    public function getRegulationSet()
    {
        return $this->container['regulation_set'];
    }

    /**
     * Sets regulation_set
     *
     * @param string $regulation_set The Regulatory set associated with every regulated shipment. It must be same across the shipment.  Valid values:  ADR = Europe to Europe Ground Movement  CFR = HazMat regulated by US Dept. of Transportation within the U.S. or ground shipments to Canada, same as DOT   IATA = Worldwide Air movement  TDG = Canada to Canada ground movement or Canada to U.S. standard movement.  ORMD - deprecated
     *
     * @return $this
     */
    public function setRegulationSet($regulation_set)
    {
        $allowedValues = $this->getRegulationSetAllowableValues();
        if (!is_null($regulation_set) && !in_array($regulation_set, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'regulation_set', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['regulation_set'] = $regulation_set;

        return $this;
    }

    /**
     * Gets emergency_contact
     *
     * @return string
     */
    public function getEmergencyContact()
    {
        return $this->container['emergency_contact'];
    }

    /**
     * Sets emergency_contact
     *
     * @param string $emergency_contact The emergency information, contact name and/or contract number, required to be communicated when a call is placed to the EmergencyPhoneNumber.  The information is required if there is a value in the EmergencyPhoneNumber field above and the shipment is with a US50 or PR origin and/or destination and the RegulationSet is IATA.  Both UPS and Fedex
     *
     * @return $this
     */
    public function setEmergencyContact($emergency_contact)
    {
        $this->container['emergency_contact'] = $emergency_contact;

        return $this;
    }

    /**
     * Gets emergency_phone
     *
     * @return string
     */
    public function getEmergencyPhone()
    {
        return $this->container['emergency_phone'];
    }

    /**
     * Sets emergency_phone
     *
     * @param string $emergency_phone 24 Hour Emergency Phone Number of the shipper. Valid values for this field are (0) through (9) with trailing blanks. For numbers within the U.S., the layout is 1, area code, 7-digit number. For all other countries or territories the layout is country or territory code, area code, number.  The following are restricted in the phone number: period “.”, dash “-“, plus sign “+” and conventional parentheses “(“ and “)”, “EXT\" or \"OPT\"\"  Both UPS and Fedex
     *
     * @return $this
     */
    public function setEmergencyPhone($emergency_phone)
    {
        $this->container['emergency_phone'] = $emergency_phone;

        return $this;
    }

    /**
     * Gets signatory
     *
     * @return \Fulfillment\StraightShip\Client\Model\DangerousGoodsSignatory
     */
    public function getSignatory()
    {
        return $this->container['signatory'];
    }

    /**
     * Sets signatory
     *
     * @param \Fulfillment\StraightShip\Client\Model\DangerousGoodsSignatory $signatory signatory
     *
     * @return $this
     */
    public function setSignatory($signatory)
    {
        $this->container['signatory'] = $signatory;

        return $this;
    }

    /**
     * Gets offeror
     *
     * @return string
     */
    public function getOfferor()
    {
        return $this->container['offeror'];
    }

    /**
     * Sets offeror
     *
     * @param string $offeror Offeror's name or contract number per DOT regulation.   Fedex
     *
     * @return $this
     */
    public function setOfferor($offeror)
    {
        $this->container['offeror'] = $offeror;

        return $this;
    }

    /**
     * Gets additional_handling
     *
     * @return string
     */
    public function getAdditionalHandling()
    {
        return $this->container['additional_handling'];
    }

    /**
     * Sets additional_handling
     *
     * @param string $additional_handling Additional handling
     *
     * @return $this
     */
    public function setAdditionalHandling($additional_handling)
    {
        $this->container['additional_handling'] = $additional_handling;

        return $this;
    }

    /**
     * Gets accessibility
     *
     * @return string
     */
    public function getAccessibility()
    {
        return $this->container['accessibility'];
    }

    /**
     * Sets accessibility
     *
     * @param string $accessibility Accessibility attribute
     *
     * @return $this
     */
    public function setAccessibility($accessibility)
    {
        $allowedValues = $this->getAccessibilityAllowableValues();
        if (!is_null($accessibility) && !in_array($accessibility, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'accessibility', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['accessibility'] = $accessibility;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
