<?php
/**
 * PackageFreightCharge
 *
 * PHP version 5
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Techship API v3
 *
 * API regions:  US: <a href='https://api-us.techship.io/api/docs/ui/index'>https://api-us.techship.io/api/docs/ui/index</a>  CA: <a href='https://api-ca.techship.io/api/docs/ui/index'>https://api-ca.techship.io/api/docs/ui/index</a>
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fulfillment\StraightShip\Client\Model;

use \ArrayAccess;
use Fulfillment\StraightShip\Client\ObjectSerializer;

/**
 * PackageFreightCharge Class Doc Comment
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PackageFreightCharge implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PackageFreightCharge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tax1_type' => 'string',
        'tax1_amount' => 'double',
        'tax2_type' => 'string',
        'tax2_amount' => 'double',
        'tax3_type' => 'string',
        'tax3_amount' => 'double',
        'shipping_charge' => 'double',
        'shipping_charge_total' => 'double',
        'fuel_surcharge' => 'double',
        'fee_markup' => 'double',
        'billable_weight' => 'double',
        'billable_weight_uom' => 'string',
        'dimensional_weight' => 'double',
        'dimensional_weight_uom' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tax1_type' => null,
        'tax1_amount' => 'double',
        'tax2_type' => null,
        'tax2_amount' => 'double',
        'tax3_type' => null,
        'tax3_amount' => 'double',
        'shipping_charge' => 'double',
        'shipping_charge_total' => 'double',
        'fuel_surcharge' => 'double',
        'fee_markup' => 'double',
        'billable_weight' => 'double',
        'billable_weight_uom' => null,
        'dimensional_weight' => 'double',
        'dimensional_weight_uom' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax1_type' => 'Tax1Type',
        'tax1_amount' => 'Tax1Amount',
        'tax2_type' => 'Tax2Type',
        'tax2_amount' => 'Tax2Amount',
        'tax3_type' => 'Tax3Type',
        'tax3_amount' => 'Tax3Amount',
        'shipping_charge' => 'ShippingCharge',
        'shipping_charge_total' => 'ShippingChargeTotal',
        'fuel_surcharge' => 'FuelSurcharge',
        'fee_markup' => 'FeeMarkup',
        'billable_weight' => 'BillableWeight',
        'billable_weight_uom' => 'BillableWeightUom',
        'dimensional_weight' => 'DimensionalWeight',
        'dimensional_weight_uom' => 'DimensionalWeightUom'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax1_type' => 'setTax1Type',
        'tax1_amount' => 'setTax1Amount',
        'tax2_type' => 'setTax2Type',
        'tax2_amount' => 'setTax2Amount',
        'tax3_type' => 'setTax3Type',
        'tax3_amount' => 'setTax3Amount',
        'shipping_charge' => 'setShippingCharge',
        'shipping_charge_total' => 'setShippingChargeTotal',
        'fuel_surcharge' => 'setFuelSurcharge',
        'fee_markup' => 'setFeeMarkup',
        'billable_weight' => 'setBillableWeight',
        'billable_weight_uom' => 'setBillableWeightUom',
        'dimensional_weight' => 'setDimensionalWeight',
        'dimensional_weight_uom' => 'setDimensionalWeightUom'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax1_type' => 'getTax1Type',
        'tax1_amount' => 'getTax1Amount',
        'tax2_type' => 'getTax2Type',
        'tax2_amount' => 'getTax2Amount',
        'tax3_type' => 'getTax3Type',
        'tax3_amount' => 'getTax3Amount',
        'shipping_charge' => 'getShippingCharge',
        'shipping_charge_total' => 'getShippingChargeTotal',
        'fuel_surcharge' => 'getFuelSurcharge',
        'fee_markup' => 'getFeeMarkup',
        'billable_weight' => 'getBillableWeight',
        'billable_weight_uom' => 'getBillableWeightUom',
        'dimensional_weight' => 'getDimensionalWeight',
        'dimensional_weight_uom' => 'getDimensionalWeightUom'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tax1_type'] = isset($data['tax1_type']) ? $data['tax1_type'] : null;
        $this->container['tax1_amount'] = isset($data['tax1_amount']) ? $data['tax1_amount'] : null;
        $this->container['tax2_type'] = isset($data['tax2_type']) ? $data['tax2_type'] : null;
        $this->container['tax2_amount'] = isset($data['tax2_amount']) ? $data['tax2_amount'] : null;
        $this->container['tax3_type'] = isset($data['tax3_type']) ? $data['tax3_type'] : null;
        $this->container['tax3_amount'] = isset($data['tax3_amount']) ? $data['tax3_amount'] : null;
        $this->container['shipping_charge'] = isset($data['shipping_charge']) ? $data['shipping_charge'] : null;
        $this->container['shipping_charge_total'] = isset($data['shipping_charge_total']) ? $data['shipping_charge_total'] : null;
        $this->container['fuel_surcharge'] = isset($data['fuel_surcharge']) ? $data['fuel_surcharge'] : null;
        $this->container['fee_markup'] = isset($data['fee_markup']) ? $data['fee_markup'] : null;
        $this->container['billable_weight'] = isset($data['billable_weight']) ? $data['billable_weight'] : null;
        $this->container['billable_weight_uom'] = isset($data['billable_weight_uom']) ? $data['billable_weight_uom'] : null;
        $this->container['dimensional_weight'] = isset($data['dimensional_weight']) ? $data['dimensional_weight'] : null;
        $this->container['dimensional_weight_uom'] = isset($data['dimensional_weight_uom']) ? $data['dimensional_weight_uom'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax1_type
     *
     * @return string
     */
    public function getTax1Type()
    {
        return $this->container['tax1_type'];
    }

    /**
     * Sets tax1_type
     *
     * @param string $tax1_type Shipment tax 1 code. Ignored on creation
     *
     * @return $this
     */
    public function setTax1Type($tax1_type)
    {
        $this->container['tax1_type'] = $tax1_type;

        return $this;
    }

    /**
     * Gets tax1_amount
     *
     * @return double
     */
    public function getTax1Amount()
    {
        return $this->container['tax1_amount'];
    }

    /**
     * Sets tax1_amount
     *
     * @param double $tax1_amount Shipment tax 1 amount. Ignored on creation
     *
     * @return $this
     */
    public function setTax1Amount($tax1_amount)
    {
        $this->container['tax1_amount'] = $tax1_amount;

        return $this;
    }

    /**
     * Gets tax2_type
     *
     * @return string
     */
    public function getTax2Type()
    {
        return $this->container['tax2_type'];
    }

    /**
     * Sets tax2_type
     *
     * @param string $tax2_type Shipment tax 2 code. Ignored on creation
     *
     * @return $this
     */
    public function setTax2Type($tax2_type)
    {
        $this->container['tax2_type'] = $tax2_type;

        return $this;
    }

    /**
     * Gets tax2_amount
     *
     * @return double
     */
    public function getTax2Amount()
    {
        return $this->container['tax2_amount'];
    }

    /**
     * Sets tax2_amount
     *
     * @param double $tax2_amount Shipment tax 2 amount. Ignored on creation
     *
     * @return $this
     */
    public function setTax2Amount($tax2_amount)
    {
        $this->container['tax2_amount'] = $tax2_amount;

        return $this;
    }

    /**
     * Gets tax3_type
     *
     * @return string
     */
    public function getTax3Type()
    {
        return $this->container['tax3_type'];
    }

    /**
     * Sets tax3_type
     *
     * @param string $tax3_type Shipment tax 3 code. Ignored on creation
     *
     * @return $this
     */
    public function setTax3Type($tax3_type)
    {
        $this->container['tax3_type'] = $tax3_type;

        return $this;
    }

    /**
     * Gets tax3_amount
     *
     * @return double
     */
    public function getTax3Amount()
    {
        return $this->container['tax3_amount'];
    }

    /**
     * Sets tax3_amount
     *
     * @param double $tax3_amount Shipment tax 3 amount. Ignored on creation
     *
     * @return $this
     */
    public function setTax3Amount($tax3_amount)
    {
        $this->container['tax3_amount'] = $tax3_amount;

        return $this;
    }

    /**
     * Gets shipping_charge
     *
     * @return double
     */
    public function getShippingCharge()
    {
        return $this->container['shipping_charge'];
    }

    /**
     * Sets shipping_charge
     *
     * @param double $shipping_charge Shipping charge. Ignored on creation
     *
     * @return $this
     */
    public function setShippingCharge($shipping_charge)
    {
        $this->container['shipping_charge'] = $shipping_charge;

        return $this;
    }

    /**
     * Gets shipping_charge_total
     *
     * @return double
     */
    public function getShippingChargeTotal()
    {
        return $this->container['shipping_charge_total'];
    }

    /**
     * Sets shipping_charge_total
     *
     * @param double $shipping_charge_total Shipping charge total. Ignored on creation
     *
     * @return $this
     */
    public function setShippingChargeTotal($shipping_charge_total)
    {
        $this->container['shipping_charge_total'] = $shipping_charge_total;

        return $this;
    }

    /**
     * Gets fuel_surcharge
     *
     * @return double
     */
    public function getFuelSurcharge()
    {
        return $this->container['fuel_surcharge'];
    }

    /**
     * Sets fuel_surcharge
     *
     * @param double $fuel_surcharge Carrier fuel surcharge. Ignored on creation
     *
     * @return $this
     */
    public function setFuelSurcharge($fuel_surcharge)
    {
        $this->container['fuel_surcharge'] = $fuel_surcharge;

        return $this;
    }

    /**
     * Gets fee_markup
     *
     * @return double
     */
    public function getFeeMarkup()
    {
        return $this->container['fee_markup'];
    }

    /**
     * Sets fee_markup
     *
     * @param double $fee_markup Fee markup. Ignored on creation
     *
     * @return $this
     */
    public function setFeeMarkup($fee_markup)
    {
        $this->container['fee_markup'] = $fee_markup;

        return $this;
    }

    /**
     * Gets billable_weight
     *
     * @return double
     */
    public function getBillableWeight()
    {
        return $this->container['billable_weight'];
    }

    /**
     * Sets billable_weight
     *
     * @param double $billable_weight Billable weight.
     *
     * @return $this
     */
    public function setBillableWeight($billable_weight)
    {
        $this->container['billable_weight'] = $billable_weight;

        return $this;
    }

    /**
     * Gets billable_weight_uom
     *
     * @return string
     */
    public function getBillableWeightUom()
    {
        return $this->container['billable_weight_uom'];
    }

    /**
     * Sets billable_weight_uom
     *
     * @param string $billable_weight_uom Represents the unit of measure for the billable weight.
     *
     * @return $this
     */
    public function setBillableWeightUom($billable_weight_uom)
    {
        $this->container['billable_weight_uom'] = $billable_weight_uom;

        return $this;
    }

    /**
     * Gets dimensional_weight
     *
     * @return double
     */
    public function getDimensionalWeight()
    {
        return $this->container['dimensional_weight'];
    }

    /**
     * Sets dimensional_weight
     *
     * @param double $dimensional_weight Represents the dimensional weight.
     *
     * @return $this
     */
    public function setDimensionalWeight($dimensional_weight)
    {
        $this->container['dimensional_weight'] = $dimensional_weight;

        return $this;
    }

    /**
     * Gets dimensional_weight_uom
     *
     * @return string
     */
    public function getDimensionalWeightUom()
    {
        return $this->container['dimensional_weight_uom'];
    }

    /**
     * Sets dimensional_weight_uom
     *
     * @param string $dimensional_weight_uom Represents dimensional weight unit of measurement.
     *
     * @return $this
     */
    public function setDimensionalWeightUom($dimensional_weight_uom)
    {
        $this->container['dimensional_weight_uom'] = $dimensional_weight_uom;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
