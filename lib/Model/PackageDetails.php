<?php
/**
 * PackageDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Techship API v3
 *
 * API regions:  US: <a href='https://api-us.techship.io/api/docs/ui/index'>https://api-us.techship.io/api/docs/ui/index</a>  CA: <a href='https://api-ca.techship.io/api/docs/ui/index'>https://api-ca.techship.io/api/docs/ui/index</a>
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fulfillment\StraightShip\Client\Model;

use \ArrayAccess;
use Fulfillment\StraightShip\Client\ObjectSerializer;

/**
 * PackageDetails Class Doc Comment
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PackageDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PackageDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sscc' => 'string',
        'carton_id' => 'string',
        'customer_sku' => 'string',
        'warehouse_sku' => 'string',
        'middle_mile_container_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sscc' => null,
        'carton_id' => null,
        'customer_sku' => null,
        'warehouse_sku' => null,
        'middle_mile_container_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sscc' => 'SSCC',
        'carton_id' => 'CartonId',
        'customer_sku' => 'CustomerSKU',
        'warehouse_sku' => 'WarehouseSKU',
        'middle_mile_container_id' => 'MiddleMileContainerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sscc' => 'setSscc',
        'carton_id' => 'setCartonId',
        'customer_sku' => 'setCustomerSku',
        'warehouse_sku' => 'setWarehouseSku',
        'middle_mile_container_id' => 'setMiddleMileContainerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sscc' => 'getSscc',
        'carton_id' => 'getCartonId',
        'customer_sku' => 'getCustomerSku',
        'warehouse_sku' => 'getWarehouseSku',
        'middle_mile_container_id' => 'getMiddleMileContainerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sscc'] = isset($data['sscc']) ? $data['sscc'] : null;
        $this->container['carton_id'] = isset($data['carton_id']) ? $data['carton_id'] : null;
        $this->container['customer_sku'] = isset($data['customer_sku']) ? $data['customer_sku'] : null;
        $this->container['warehouse_sku'] = isset($data['warehouse_sku']) ? $data['warehouse_sku'] : null;
        $this->container['middle_mile_container_id'] = isset($data['middle_mile_container_id']) ? $data['middle_mile_container_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sscc
     *
     * @return string
     */
    public function getSscc()
    {
        return $this->container['sscc'];
    }

    /**
     * Sets sscc
     *
     * @param string $sscc Per package UCC 128 code.
     *
     * @return $this
     */
    public function setSscc($sscc)
    {
        $this->container['sscc'] = $sscc;

        return $this;
    }

    /**
     * Gets carton_id
     *
     * @return string
     */
    public function getCartonId()
    {
        return $this->container['carton_id'];
    }

    /**
     * Sets carton_id
     *
     * @param string $carton_id Carton id or container serial number
     *
     * @return $this
     */
    public function setCartonId($carton_id)
    {
        $this->container['carton_id'] = $carton_id;

        return $this;
    }

    /**
     * Gets customer_sku
     *
     * @return string
     */
    public function getCustomerSku()
    {
        return $this->container['customer_sku'];
    }

    /**
     * Sets customer_sku
     *
     * @param string $customer_sku Optional customer SKU
     *
     * @return $this
     */
    public function setCustomerSku($customer_sku)
    {
        $this->container['customer_sku'] = $customer_sku;

        return $this;
    }

    /**
     * Gets warehouse_sku
     *
     * @return string
     */
    public function getWarehouseSku()
    {
        return $this->container['warehouse_sku'];
    }

    /**
     * Sets warehouse_sku
     *
     * @param string $warehouse_sku Optional warehouse SKU
     *
     * @return $this
     */
    public function setWarehouseSku($warehouse_sku)
    {
        $this->container['warehouse_sku'] = $warehouse_sku;

        return $this;
    }

    /**
     * Gets middle_mile_container_id
     *
     * @return string
     */
    public function getMiddleMileContainerId()
    {
        return $this->container['middle_mile_container_id'];
    }

    /**
     * Sets middle_mile_container_id
     *
     * @param string $middle_mile_container_id Middle mile container id associated with parcel
     *
     * @return $this
     */
    public function setMiddleMileContainerId($middle_mile_container_id)
    {
        $this->container['middle_mile_container_id'] = $middle_mile_container_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
