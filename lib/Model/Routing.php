<?php
/**
 * Routing
 *
 * PHP version 5
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Techship API v3
 *
 * API regions:  US: <a href='https://api-us.techship.io/api/docs/ui/index'>https://api-us.techship.io/api/docs/ui/index</a>  CA: <a href='https://api-ca.techship.io/api/docs/ui/index'>https://api-ca.techship.io/api/docs/ui/index</a>
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fulfillment\StraightShip\Client\Model;

use \ArrayAccess;
use Fulfillment\StraightShip\Client\ObjectSerializer;
use Fulfillment\StraightShip\Client\Model\Address;

/**
 * Routing Class Doc Comment
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Routing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Routing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_code' => 'string',
        'account_id' => 'int',
        'service_code' => 'string',
        'external_service_code' => 'string',
        'rate_shopping_group' => 'string',
        'routing_group' => 'string',
        'freight_payment_terms' => 'string',
        'third_party_billing_account' => 'string',
        'third_party_billing_postal' => 'string',
        'third_party_billing_country_code' => 'string',
        'third_party_billing_address' => Address::class,
        'pickup_date_time' => 'string',
        'injection_date_time' => 'string',
        'departure_date_time' => 'string',
        'delivery_date_time' => 'string',
        'consignee_open_time' => 'string',
        'consignee_close_time' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_code' => null,
        'account_id' => 'int32',
        'service_code' => null,
        'external_service_code' => null,
        'rate_shopping_group' => null,
        'routing_group' => null,
        'freight_payment_terms' => null,
        'third_party_billing_account' => null,
        'third_party_billing_postal' => null,
        'third_party_billing_country_code' => null,
        'third_party_billing_address' => null,
        'pickup_date_time' => null,
        'injection_date_time' => null,
        'departure_date_time' => null,
        'delivery_date_time' => null,
        'consignee_open_time' => null,
        'consignee_close_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_code' => 'AccountCode',
        'account_id' => 'AccountId',
        'service_code' => 'ServiceCode',
        'external_service_code' => 'ExternalServiceCode',
        'rate_shopping_group' => 'RateShoppingGroup',
        'routing_group' => 'RoutingGroup',
        'freight_payment_terms' => 'FreightPaymentTerms',
        'third_party_billing_account' => 'ThirdPartyBillingAccount',
        'third_party_billing_postal' => 'ThirdPartyBillingPostal',
        'third_party_billing_country_code' => 'ThirdPartyBillingCountryCode',
        'third_party_billing_address' => 'ThirdPartyBillingAddress',
        'pickup_date_time' => 'PickupDateTime',
        'injection_date_time' => 'InjectionDateTime',
        'departure_date_time' => 'DepartureDateTime',
        'delivery_date_time' => 'DeliveryDateTime',
        'consignee_open_time' => 'ConsigneeOpenTime',
        'consignee_close_time' => 'ConsigneeCloseTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_code' => 'setAccountCode',
        'account_id' => 'setAccountId',
        'service_code' => 'setServiceCode',
        'external_service_code' => 'setExternalServiceCode',
        'rate_shopping_group' => 'setRateShoppingGroup',
        'routing_group' => 'setRoutingGroup',
        'freight_payment_terms' => 'setFreightPaymentTerms',
        'third_party_billing_account' => 'setThirdPartyBillingAccount',
        'third_party_billing_postal' => 'setThirdPartyBillingPostal',
        'third_party_billing_country_code' => 'setThirdPartyBillingCountryCode',
        'third_party_billing_address' => 'setThirdPartyBillingAddress',
        'pickup_date_time' => 'setPickupDateTime',
        'injection_date_time' => 'setInjectionDateTime',
        'departure_date_time' => 'setDepartureDateTime',
        'delivery_date_time' => 'setDeliveryDateTime',
        'consignee_open_time' => 'setConsigneeOpenTime',
        'consignee_close_time' => 'setConsigneeCloseTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_code' => 'getAccountCode',
        'account_id' => 'getAccountId',
        'service_code' => 'getServiceCode',
        'external_service_code' => 'getExternalServiceCode',
        'rate_shopping_group' => 'getRateShoppingGroup',
        'routing_group' => 'getRoutingGroup',
        'freight_payment_terms' => 'getFreightPaymentTerms',
        'third_party_billing_account' => 'getThirdPartyBillingAccount',
        'third_party_billing_postal' => 'getThirdPartyBillingPostal',
        'third_party_billing_country_code' => 'getThirdPartyBillingCountryCode',
        'third_party_billing_address' => 'getThirdPartyBillingAddress',
        'pickup_date_time' => 'getPickupDateTime',
        'injection_date_time' => 'getInjectionDateTime',
        'departure_date_time' => 'getDepartureDateTime',
        'delivery_date_time' => 'getDeliveryDateTime',
        'consignee_open_time' => 'getConsigneeOpenTime',
        'consignee_close_time' => 'getConsigneeCloseTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const FREIGHT_PAYMENT_TERMS_PREPAID = 'Prepaid';
    const FREIGHT_PAYMENT_TERMS_COLLECT = 'Collect';
    const FREIGHT_PAYMENT_TERMS_THIRD_PARTY = 'ThirdParty';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFreightPaymentTermsAllowableValues()
    {
        return [
            self::FREIGHT_PAYMENT_TERMS_PREPAID,
            self::FREIGHT_PAYMENT_TERMS_COLLECT,
            self::FREIGHT_PAYMENT_TERMS_THIRD_PARTY,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_code'] = isset($data['account_code']) ? $data['account_code'] : null;
        $this->container['account_id'] = isset($data['account_id']) ? $data['account_id'] : null;
        $this->container['service_code'] = isset($data['service_code']) ? $data['service_code'] : null;
        $this->container['external_service_code'] = isset($data['external_service_code']) ? $data['external_service_code'] : null;
        $this->container['rate_shopping_group'] = isset($data['rate_shopping_group']) ? $data['rate_shopping_group'] : null;
        $this->container['routing_group'] = isset($data['routing_group']) ? $data['routing_group'] : null;
        $this->container['freight_payment_terms'] = isset($data['freight_payment_terms']) ? $data['freight_payment_terms'] : null;
        $this->container['third_party_billing_account'] = isset($data['third_party_billing_account']) ? $data['third_party_billing_account'] : null;
        $this->container['third_party_billing_postal'] = isset($data['third_party_billing_postal']) ? $data['third_party_billing_postal'] : null;
        $this->container['third_party_billing_country_code'] = isset($data['third_party_billing_country_code']) ? $data['third_party_billing_country_code'] : null;
        $this->container['third_party_billing_address'] = isset($data['third_party_billing_address']) ? $data['third_party_billing_address'] : null;
        $this->container['pickup_date_time'] = isset($data['pickup_date_time']) ? $data['pickup_date_time'] : null;
        $this->container['injection_date_time'] = isset($data['injection_date_time']) ? $data['injection_date_time'] : null;
        $this->container['departure_date_time'] = isset($data['departure_date_time']) ? $data['departure_date_time'] : null;
        $this->container['delivery_date_time'] = isset($data['delivery_date_time']) ? $data['delivery_date_time'] : null;
        $this->container['consignee_open_time'] = isset($data['consignee_open_time']) ? $data['consignee_open_time'] : null;
        $this->container['consignee_close_time'] = isset($data['consignee_close_time']) ? $data['consignee_close_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getFreightPaymentTermsAllowableValues();
        if (!is_null($this->container['freight_payment_terms']) && !in_array($this->container['freight_payment_terms'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'freight_payment_terms', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_code
     *
     * @return string
     */
    public function getAccountCode()
    {
        return $this->container['account_code'];
    }

    /**
     * Sets account_code
     *
     * @param string $account_code Optional carrier code from list assigned to client on portal. Use null or omit for rate shopping.  You can use {Techdinamics.Ship.Core.Api.Model.ApiRouting.AccountCode} or {Techdinamics.Ship.Core.Api.Model.ApiRouting.AccountId} but not both
     *
     * @return $this
     */
    public function setAccountCode($account_code)
    {
        $this->container['account_code'] = $account_code;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return int
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param int $account_id Optional account id from list of accounts assigned to client on portal.  Use null or omit for rate shopping.  You can use {Techdinamics.Ship.Core.Api.Model.ApiRouting.AccountCode} or {Techdinamics.Ship.Core.Api.Model.ApiRouting.AccountId} but not both
     *
     * @return $this
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets service_code
     *
     * @return string
     */
    public function getServiceCode()
    {
        return $this->container['service_code'];
    }

    /**
     * Sets service_code
     *
     * @param string $service_code Optional carrier service code from list installed on portal. Default value defined on portal for client is used if value omitted.
     *
     * @return $this
     */
    public function setServiceCode($service_code)
    {
        $this->container['service_code'] = $service_code;

        return $this;
    }

    /**
     * Gets external_service_code
     *
     * @return string
     */
    public function getExternalServiceCode()
    {
        return $this->container['external_service_code'];
    }

    /**
     * Sets external_service_code
     *
     * @param string $external_service_code Optional carrier service code mapped to external code on carrier tab on portal.
     *
     * @return $this
     */
    public function setExternalServiceCode($external_service_code)
    {
        $this->container['external_service_code'] = $external_service_code;

        return $this;
    }

    /**
     * Gets rate_shopping_group
     *
     * @return string
     */
    public function getRateShoppingGroup()
    {
        return $this->container['rate_shopping_group'];
    }

    /**
     * Sets rate_shopping_group
     *
     * @param string $rate_shopping_group Rate shopping group
     *
     * @return $this
     */
    public function setRateShoppingGroup($rate_shopping_group)
    {
        $this->container['rate_shopping_group'] = $rate_shopping_group;

        return $this;
    }

    /**
     * Gets routing_group
     *
     * @return string
     */
    public function getRoutingGroup()
    {
        return $this->container['routing_group'];
    }

    /**
     * Sets routing_group
     *
     * @param string $routing_group Routing group
     *
     * @return $this
     */
    public function setRoutingGroup($routing_group)
    {
        $this->container['routing_group'] = $routing_group;

        return $this;
    }

    /**
     * Gets freight_payment_terms
     *
     * @return string
     */
    public function getFreightPaymentTerms()
    {
        return $this->container['freight_payment_terms'];
    }

    /**
     * Sets freight_payment_terms
     *
     * @param string $freight_payment_terms Freight payment terms enum:  0 - _Prepaid_  1 - _Collect_  2 - _ThirdParty_
     *
     * @return $this
     */
    public function setFreightPaymentTerms($freight_payment_terms)
    {
        $allowedValues = $this->getFreightPaymentTermsAllowableValues();
        if (!is_null($freight_payment_terms) && !in_array($freight_payment_terms, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'freight_payment_terms', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['freight_payment_terms'] = $freight_payment_terms;

        return $this;
    }

    /**
     * Gets third_party_billing_account
     *
     * @return string
     */
    public function getThirdPartyBillingAccount()
    {
        return $this->container['third_party_billing_account'];
    }

    /**
     * Sets third_party_billing_account
     *
     * @param string $third_party_billing_account Third party billing account
     *
     * @return $this
     */
    public function setThirdPartyBillingAccount($third_party_billing_account)
    {
        $this->container['third_party_billing_account'] = $third_party_billing_account;

        return $this;
    }

    /**
     * Gets third_party_billing_postal
     *
     * @return string
     */
    public function getThirdPartyBillingPostal()
    {
        return $this->container['third_party_billing_postal'];
    }

    /**
     * Sets third_party_billing_postal
     *
     * @param string $third_party_billing_postal DEPRECATED: Third party billing postal  Field is deprecated and will be removed in future versions.  Please switch to use <b>ThirdPartyBillingAddress.Postal</b>{Techdinamics.Ship.Core.Api.Model.ApiRouting.ThirdPartyBillingAddress}
     *
     * @return $this
     */
    public function setThirdPartyBillingPostal($third_party_billing_postal)
    {
        $this->container['third_party_billing_postal'] = $third_party_billing_postal;

        return $this;
    }

    /**
     * Gets third_party_billing_country_code
     *
     * @return string
     */
    public function getThirdPartyBillingCountryCode()
    {
        return $this->container['third_party_billing_country_code'];
    }

    /**
     * Sets third_party_billing_country_code
     *
     * @param string $third_party_billing_country_code DEPRECATED: Third party billing country code  Field is deprecated and will be removed in future versions.  Please switch to use <b>ThirdPartyBillingAddress.Country</b>{Techdinamics.Ship.Core.Api.Model.ApiRouting.ThirdPartyBillingAddress}
     *
     * @return $this
     */
    public function setThirdPartyBillingCountryCode($third_party_billing_country_code)
    {
        $this->container['third_party_billing_country_code'] = $third_party_billing_country_code;

        return $this;
    }

    /**
     * Gets third_party_billing_address
     *
     * @return \Fulfillment\StraightShip\Client\Model\Address
     */
    public function getThirdPartyBillingAddress()
    {
        return $this->container['third_party_billing_address'];
    }

    /**
     * Sets third_party_billing_address
     *
     * @param \Fulfillment\StraightShip\Client\Model\Address $third_party_billing_address third_party_billing_address
     *
     * @return $this
     */
    public function setThirdPartyBillingAddress($third_party_billing_address)
    {
        $this->container['third_party_billing_address'] = $third_party_billing_address;

        return $this;
    }

    /**
     * Gets pickup_date_time
     *
     * @return string
     */
    public function getPickupDateTime()
    {
        return $this->container['pickup_date_time'];
    }

    /**
     * Sets pickup_date_time
     *
     * @param string $pickup_date_time Pickup date time
     *
     * @return $this
     */
    public function setPickupDateTime($pickup_date_time)
    {
        $this->container['pickup_date_time'] = $pickup_date_time;

        return $this;
    }

    /**
     * Gets injection_date_time
     *
     * @return string
     */
    public function getInjectionDateTime()
    {
        return $this->container['injection_date_time'];
    }

    /**
     * Sets injection_date_time
     *
     * @param string $injection_date_time Injection date time
     *
     * @return $this
     */
    public function setInjectionDateTime($injection_date_time)
    {
        $this->container['injection_date_time'] = $injection_date_time;

        return $this;
    }

    /**
     * Gets departure_date_time
     *
     * @return string
     */
    public function getDepartureDateTime()
    {
        return $this->container['departure_date_time'];
    }

    /**
     * Sets departure_date_time
     *
     * @param string $departure_date_time Departure date time
     *
     * @return $this
     */
    public function setDepartureDateTime($departure_date_time)
    {
        $this->container['departure_date_time'] = $departure_date_time;

        return $this;
    }

    /**
     * Gets delivery_date_time
     *
     * @return string
     */
    public function getDeliveryDateTime()
    {
        return $this->container['delivery_date_time'];
    }

    /**
     * Sets delivery_date_time
     *
     * @param string $delivery_date_time Delivery requested date time  Must be specified in portal timezone
     *
     * @return $this
     */
    public function setDeliveryDateTime($delivery_date_time)
    {
        $this->container['delivery_date_time'] = $delivery_date_time;

        return $this;
    }

    /**
     * Gets consignee_open_time
     *
     * @return string
     */
    public function getConsigneeOpenTime()
    {
        return $this->container['consignee_open_time'];
    }

    /**
     * Sets consignee_open_time
     *
     * @param string $consignee_open_time Consignee open time  Limited support by carriers, put in hh:mm
     *
     * @return $this
     */
    public function setConsigneeOpenTime($consignee_open_time)
    {
        $this->container['consignee_open_time'] = $consignee_open_time;

        return $this;
    }

    /**
     * Gets consignee_close_time
     *
     * @return string
     */
    public function getConsigneeCloseTime()
    {
        return $this->container['consignee_close_time'];
    }

    /**
     * Sets consignee_close_time
     *
     * @param string $consignee_close_time Consignee close time  Limited support by carriers, put in hh:mm
     *
     * @return $this
     */
    public function setConsigneeCloseTime($consignee_close_time)
    {
        $this->container['consignee_close_time'] = $consignee_close_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
