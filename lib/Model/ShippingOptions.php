<?php
/**
 * ShippingOptions
 *
 * PHP version 5
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Techship API v3
 *
 * API regions:  US: <a href='https://api-us.techship.io/api/docs/ui/index'>https://api-us.techship.io/api/docs/ui/index</a>  CA: <a href='https://api-ca.techship.io/api/docs/ui/index'>https://api-ca.techship.io/api/docs/ui/index</a>
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fulfillment\StraightShip\Client\Model;

use \ArrayAccess;
use Fulfillment\StraightShip\Client\ObjectSerializer;

/**
 * ShippingOptions Class Doc Comment
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingOptions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingOptions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'signature_required' => 'bool',
        'signature_adult' => 'bool',
        'signature_indirect' => 'bool',
        'saturday_pickup' => 'bool',
        'saturday_delivery' => 'bool',
        'proof_of_age18' => 'bool',
        'proof_of_age19' => 'bool',
        'hold_at_location' => 'bool',
        'appointment_delivery' => 'bool',
        'dry_ice' => 'bool',
        'special_handling' => 'bool',
        'post_office_id' => 'string',
        'hold_for_pickup_indicator' => 'bool',
        'dangerous_goods' => 'bool',
        'explosive' => 'bool',
        'alcohol' => 'bool',
        'is_no_rts' => 'bool',
        'perishable' => 'bool',
        'keep_frozen' => 'bool',
        'two_persons' => 'bool',
        'controlled_substance' => 'bool',
        'delivery_options' => 'string',
        'origin_signature_not_required' => 'bool',
        'lift_gate_for_pick_up_indicator' => 'bool',
        'lift_gate_for_delivery_indicator' => 'bool',
        'request_pickup' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'signature_required' => null,
        'signature_adult' => null,
        'signature_indirect' => null,
        'saturday_pickup' => null,
        'saturday_delivery' => null,
        'proof_of_age18' => null,
        'proof_of_age19' => null,
        'hold_at_location' => null,
        'appointment_delivery' => null,
        'dry_ice' => null,
        'special_handling' => null,
        'post_office_id' => null,
        'hold_for_pickup_indicator' => null,
        'dangerous_goods' => null,
        'explosive' => null,
        'alcohol' => null,
        'is_no_rts' => null,
        'perishable' => null,
        'keep_frozen' => null,
        'two_persons' => null,
        'controlled_substance' => null,
        'delivery_options' => null,
        'origin_signature_not_required' => null,
        'lift_gate_for_pick_up_indicator' => null,
        'lift_gate_for_delivery_indicator' => null,
        'request_pickup' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'signature_required' => 'SignatureRequired',
        'signature_adult' => 'SignatureAdult',
        'signature_indirect' => 'SignatureIndirect',
        'saturday_pickup' => 'SaturdayPickup',
        'saturday_delivery' => 'SaturdayDelivery',
        'proof_of_age18' => 'ProofOfAge18',
        'proof_of_age19' => 'ProofOfAge19',
        'hold_at_location' => 'HoldAtLocation',
        'appointment_delivery' => 'AppointmentDelivery',
        'dry_ice' => 'DryIce',
        'special_handling' => 'SpecialHandling',
        'post_office_id' => 'PostOfficeId',
        'hold_for_pickup_indicator' => 'HoldForPickupIndicator',
        'dangerous_goods' => 'DangerousGoods',
        'explosive' => 'Explosive',
        'alcohol' => 'Alcohol',
        'is_no_rts' => 'IsNoRTS',
        'perishable' => 'Perishable',
        'keep_frozen' => 'KeepFrozen',
        'two_persons' => 'TwoPersons',
        'controlled_substance' => 'ControlledSubstance',
        'delivery_options' => 'DeliveryOptions',
        'origin_signature_not_required' => 'OriginSignatureNotRequired',
        'lift_gate_for_pick_up_indicator' => 'LiftGateForPickUpIndicator',
        'lift_gate_for_delivery_indicator' => 'LiftGateForDeliveryIndicator',
        'request_pickup' => 'RequestPickup'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'signature_required' => 'setSignatureRequired',
        'signature_adult' => 'setSignatureAdult',
        'signature_indirect' => 'setSignatureIndirect',
        'saturday_pickup' => 'setSaturdayPickup',
        'saturday_delivery' => 'setSaturdayDelivery',
        'proof_of_age18' => 'setProofOfAge18',
        'proof_of_age19' => 'setProofOfAge19',
        'hold_at_location' => 'setHoldAtLocation',
        'appointment_delivery' => 'setAppointmentDelivery',
        'dry_ice' => 'setDryIce',
        'special_handling' => 'setSpecialHandling',
        'post_office_id' => 'setPostOfficeId',
        'hold_for_pickup_indicator' => 'setHoldForPickupIndicator',
        'dangerous_goods' => 'setDangerousGoods',
        'explosive' => 'setExplosive',
        'alcohol' => 'setAlcohol',
        'is_no_rts' => 'setIsNoRts',
        'perishable' => 'setPerishable',
        'keep_frozen' => 'setKeepFrozen',
        'two_persons' => 'setTwoPersons',
        'controlled_substance' => 'setControlledSubstance',
        'delivery_options' => 'setDeliveryOptions',
        'origin_signature_not_required' => 'setOriginSignatureNotRequired',
        'lift_gate_for_pick_up_indicator' => 'setLiftGateForPickUpIndicator',
        'lift_gate_for_delivery_indicator' => 'setLiftGateForDeliveryIndicator',
        'request_pickup' => 'setRequestPickup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'signature_required' => 'getSignatureRequired',
        'signature_adult' => 'getSignatureAdult',
        'signature_indirect' => 'getSignatureIndirect',
        'saturday_pickup' => 'getSaturdayPickup',
        'saturday_delivery' => 'getSaturdayDelivery',
        'proof_of_age18' => 'getProofOfAge18',
        'proof_of_age19' => 'getProofOfAge19',
        'hold_at_location' => 'getHoldAtLocation',
        'appointment_delivery' => 'getAppointmentDelivery',
        'dry_ice' => 'getDryIce',
        'special_handling' => 'getSpecialHandling',
        'post_office_id' => 'getPostOfficeId',
        'hold_for_pickup_indicator' => 'getHoldForPickupIndicator',
        'dangerous_goods' => 'getDangerousGoods',
        'explosive' => 'getExplosive',
        'alcohol' => 'getAlcohol',
        'is_no_rts' => 'getIsNoRts',
        'perishable' => 'getPerishable',
        'keep_frozen' => 'getKeepFrozen',
        'two_persons' => 'getTwoPersons',
        'controlled_substance' => 'getControlledSubstance',
        'delivery_options' => 'getDeliveryOptions',
        'origin_signature_not_required' => 'getOriginSignatureNotRequired',
        'lift_gate_for_pick_up_indicator' => 'getLiftGateForPickUpIndicator',
        'lift_gate_for_delivery_indicator' => 'getLiftGateForDeliveryIndicator',
        'request_pickup' => 'getRequestPickup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DELIVERY_OPTIONS__DEFAULT = 'Default';
    const DELIVERY_OPTIONS_REGULAR = 'Regular';
    const DELIVERY_OPTIONS_CARD_FOR_PICKUP = 'CardForPickup';
    const DELIVERY_OPTIONS_DO_NOT_SAFE_DROP = 'DoNotSafeDrop';
    const DELIVERY_OPTIONS_LEAVE_AT_DOOR = 'LeaveAtDoor';
    const DELIVERY_OPTIONS_DELIVER_TO_POST_OFFICE = 'DeliverToPostOffice';
    const DELIVERY_OPTIONS_DO_NOT_DROP_SHIP = 'DoNotDropShip';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDeliveryOptionsAllowableValues()
    {
        return [
            self::DELIVERY_OPTIONS__DEFAULT,
            self::DELIVERY_OPTIONS_REGULAR,
            self::DELIVERY_OPTIONS_CARD_FOR_PICKUP,
            self::DELIVERY_OPTIONS_DO_NOT_SAFE_DROP,
            self::DELIVERY_OPTIONS_LEAVE_AT_DOOR,
            self::DELIVERY_OPTIONS_DELIVER_TO_POST_OFFICE,
            self::DELIVERY_OPTIONS_DO_NOT_DROP_SHIP,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['signature_required'] = isset($data['signature_required']) ? $data['signature_required'] : null;
        $this->container['signature_adult'] = isset($data['signature_adult']) ? $data['signature_adult'] : null;
        $this->container['signature_indirect'] = isset($data['signature_indirect']) ? $data['signature_indirect'] : null;
        $this->container['saturday_pickup'] = isset($data['saturday_pickup']) ? $data['saturday_pickup'] : null;
        $this->container['saturday_delivery'] = isset($data['saturday_delivery']) ? $data['saturday_delivery'] : null;
        $this->container['proof_of_age18'] = isset($data['proof_of_age18']) ? $data['proof_of_age18'] : null;
        $this->container['proof_of_age19'] = isset($data['proof_of_age19']) ? $data['proof_of_age19'] : null;
        $this->container['hold_at_location'] = isset($data['hold_at_location']) ? $data['hold_at_location'] : null;
        $this->container['appointment_delivery'] = isset($data['appointment_delivery']) ? $data['appointment_delivery'] : null;
        $this->container['dry_ice'] = isset($data['dry_ice']) ? $data['dry_ice'] : null;
        $this->container['special_handling'] = isset($data['special_handling']) ? $data['special_handling'] : null;
        $this->container['post_office_id'] = isset($data['post_office_id']) ? $data['post_office_id'] : null;
        $this->container['hold_for_pickup_indicator'] = isset($data['hold_for_pickup_indicator']) ? $data['hold_for_pickup_indicator'] : null;
        $this->container['dangerous_goods'] = isset($data['dangerous_goods']) ? $data['dangerous_goods'] : null;
        $this->container['explosive'] = isset($data['explosive']) ? $data['explosive'] : null;
        $this->container['alcohol'] = isset($data['alcohol']) ? $data['alcohol'] : null;
        $this->container['is_no_rts'] = isset($data['is_no_rts']) ? $data['is_no_rts'] : null;
        $this->container['perishable'] = isset($data['perishable']) ? $data['perishable'] : null;
        $this->container['keep_frozen'] = isset($data['keep_frozen']) ? $data['keep_frozen'] : null;
        $this->container['two_persons'] = isset($data['two_persons']) ? $data['two_persons'] : null;
        $this->container['controlled_substance'] = isset($data['controlled_substance']) ? $data['controlled_substance'] : null;
        $this->container['delivery_options'] = isset($data['delivery_options']) ? $data['delivery_options'] : null;
        $this->container['origin_signature_not_required'] = isset($data['origin_signature_not_required']) ? $data['origin_signature_not_required'] : null;
        $this->container['lift_gate_for_pick_up_indicator'] = isset($data['lift_gate_for_pick_up_indicator']) ? $data['lift_gate_for_pick_up_indicator'] : null;
        $this->container['lift_gate_for_delivery_indicator'] = isset($data['lift_gate_for_delivery_indicator']) ? $data['lift_gate_for_delivery_indicator'] : null;
        $this->container['request_pickup'] = isset($data['request_pickup']) ? $data['request_pickup'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDeliveryOptionsAllowableValues();
        if (!is_null($this->container['delivery_options']) && !in_array($this->container['delivery_options'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'delivery_options', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets signature_required
     *
     * @return bool
     */
    public function getSignatureRequired()
    {
        return $this->container['signature_required'];
    }

    /**
     * Sets signature_required
     *
     * @param bool $signature_required Signature required
     *
     * @return $this
     */
    public function setSignatureRequired($signature_required)
    {
        $this->container['signature_required'] = $signature_required;

        return $this;
    }

    /**
     * Gets signature_adult
     *
     * @return bool
     */
    public function getSignatureAdult()
    {
        return $this->container['signature_adult'];
    }

    /**
     * Sets signature_adult
     *
     * @param bool $signature_adult Is adult signature required  Limited support by carriers
     *
     * @return $this
     */
    public function setSignatureAdult($signature_adult)
    {
        $this->container['signature_adult'] = $signature_adult;

        return $this;
    }

    /**
     * Gets signature_indirect
     *
     * @return bool
     */
    public function getSignatureIndirect()
    {
        return $this->container['signature_indirect'];
    }

    /**
     * Sets signature_indirect
     *
     * @param bool $signature_indirect Indirect signature
     *
     * @return $this
     */
    public function setSignatureIndirect($signature_indirect)
    {
        $this->container['signature_indirect'] = $signature_indirect;

        return $this;
    }

    /**
     * Gets saturday_pickup
     *
     * @return bool
     */
    public function getSaturdayPickup()
    {
        return $this->container['saturday_pickup'];
    }

    /**
     * Sets saturday_pickup
     *
     * @param bool $saturday_pickup Is saturday pickup required  Limited support by carriers
     *
     * @return $this
     */
    public function setSaturdayPickup($saturday_pickup)
    {
        $this->container['saturday_pickup'] = $saturday_pickup;

        return $this;
    }

    /**
     * Gets saturday_delivery
     *
     * @return bool
     */
    public function getSaturdayDelivery()
    {
        return $this->container['saturday_delivery'];
    }

    /**
     * Sets saturday_delivery
     *
     * @param bool $saturday_delivery Is saturday delivery required  Limited support by carriers
     *
     * @return $this
     */
    public function setSaturdayDelivery($saturday_delivery)
    {
        $this->container['saturday_delivery'] = $saturday_delivery;

        return $this;
    }

    /**
     * Gets proof_of_age18
     *
     * @return bool
     */
    public function getProofOfAge18()
    {
        return $this->container['proof_of_age18'];
    }

    /**
     * Sets proof_of_age18
     *
     * @param bool $proof_of_age18 Is proof of age 18 required (only _Canada Post_)
     *
     * @return $this
     */
    public function setProofOfAge18($proof_of_age18)
    {
        $this->container['proof_of_age18'] = $proof_of_age18;

        return $this;
    }

    /**
     * Gets proof_of_age19
     *
     * @return bool
     */
    public function getProofOfAge19()
    {
        return $this->container['proof_of_age19'];
    }

    /**
     * Sets proof_of_age19
     *
     * @param bool $proof_of_age19 Is proof of age 19 required? (Applicable only to Canada Post)
     *
     * @return $this
     */
    public function setProofOfAge19($proof_of_age19)
    {
        $this->container['proof_of_age19'] = $proof_of_age19;

        return $this;
    }

    /**
     * Gets hold_at_location
     *
     * @return bool
     */
    public function getHoldAtLocation()
    {
        return $this->container['hold_at_location'];
    }

    /**
     * Sets hold_at_location
     *
     * @param bool $hold_at_location Should carrier hold at post office location  Limited support by carriers
     *
     * @return $this
     */
    public function setHoldAtLocation($hold_at_location)
    {
        $this->container['hold_at_location'] = $hold_at_location;

        return $this;
    }

    /**
     * Gets appointment_delivery
     *
     * @return bool
     */
    public function getAppointmentDelivery()
    {
        return $this->container['appointment_delivery'];
    }

    /**
     * Sets appointment_delivery
     *
     * @param bool $appointment_delivery Is delivery appointment required  Limited support by carriers
     *
     * @return $this
     */
    public function setAppointmentDelivery($appointment_delivery)
    {
        $this->container['appointment_delivery'] = $appointment_delivery;

        return $this;
    }

    /**
     * Gets dry_ice
     *
     * @return bool
     */
    public function getDryIce()
    {
        return $this->container['dry_ice'];
    }

    /**
     * Sets dry_ice
     *
     * @param bool $dry_ice Is dry ice shipment  Limited support by carriers
     *
     * @return $this
     */
    public function setDryIce($dry_ice)
    {
        $this->container['dry_ice'] = $dry_ice;

        return $this;
    }

    /**
     * Gets special_handling
     *
     * @return bool
     */
    public function getSpecialHandling()
    {
        return $this->container['special_handling'];
    }

    /**
     * Sets special_handling
     *
     * @param bool $special_handling Is special handling needed  Limited support by carriers
     *
     * @return $this
     */
    public function setSpecialHandling($special_handling)
    {
        $this->container['special_handling'] = $special_handling;

        return $this;
    }

    /**
     * Gets post_office_id
     *
     * @return string
     */
    public function getPostOfficeId()
    {
        return $this->container['post_office_id'];
    }

    /**
     * Sets post_office_id
     *
     * @param string $post_office_id Post office id for hold for pickup option
     *
     * @return $this
     */
    public function setPostOfficeId($post_office_id)
    {
        $this->container['post_office_id'] = $post_office_id;

        return $this;
    }

    /**
     * Gets hold_for_pickup_indicator
     *
     * @return bool
     */
    public function getHoldForPickupIndicator()
    {
        return $this->container['hold_for_pickup_indicator'];
    }

    /**
     * Sets hold_for_pickup_indicator
     *
     * @param bool $hold_for_pickup_indicator Keep shipment at post office for pickup (if suppored by carrier)
     *
     * @return $this
     */
    public function setHoldForPickupIndicator($hold_for_pickup_indicator)
    {
        $this->container['hold_for_pickup_indicator'] = $hold_for_pickup_indicator;

        return $this;
    }

    /**
     * Gets dangerous_goods
     *
     * @return bool
     */
    public function getDangerousGoods()
    {
        return $this->container['dangerous_goods'];
    }

    /**
     * Sets dangerous_goods
     *
     * @param bool $dangerous_goods Dangerous goods flag
     *
     * @return $this
     */
    public function setDangerousGoods($dangerous_goods)
    {
        $this->container['dangerous_goods'] = $dangerous_goods;

        return $this;
    }

    /**
     * Gets explosive
     *
     * @return bool
     */
    public function getExplosive()
    {
        return $this->container['explosive'];
    }

    /**
     * Sets explosive
     *
     * @param bool $explosive Explosive flag
     *
     * @return $this
     */
    public function setExplosive($explosive)
    {
        $this->container['explosive'] = $explosive;

        return $this;
    }

    /**
     * Gets alcohol
     *
     * @return bool
     */
    public function getAlcohol()
    {
        return $this->container['alcohol'];
    }

    /**
     * Sets alcohol
     *
     * @param bool $alcohol Alcohol flag
     *
     * @return $this
     */
    public function setAlcohol($alcohol)
    {
        $this->container['alcohol'] = $alcohol;

        return $this;
    }

    /**
     * Gets is_no_rts
     *
     * @return bool
     */
    public function getIsNoRts()
    {
        return $this->container['is_no_rts'];
    }

    /**
     * Sets is_no_rts
     *
     * @param bool $is_no_rts IsNoRTS flag
     *
     * @return $this
     */
    public function setIsNoRts($is_no_rts)
    {
        $this->container['is_no_rts'] = $is_no_rts;

        return $this;
    }

    /**
     * Gets perishable
     *
     * @return bool
     */
    public function getPerishable()
    {
        return $this->container['perishable'];
    }

    /**
     * Sets perishable
     *
     * @param bool $perishable Perishable flag
     *
     * @return $this
     */
    public function setPerishable($perishable)
    {
        $this->container['perishable'] = $perishable;

        return $this;
    }

    /**
     * Gets keep_frozen
     *
     * @return bool
     */
    public function getKeepFrozen()
    {
        return $this->container['keep_frozen'];
    }

    /**
     * Sets keep_frozen
     *
     * @param bool $keep_frozen Keep frozen flag
     *
     * @return $this
     */
    public function setKeepFrozen($keep_frozen)
    {
        $this->container['keep_frozen'] = $keep_frozen;

        return $this;
    }

    /**
     * Gets two_persons
     *
     * @return bool
     */
    public function getTwoPersons()
    {
        return $this->container['two_persons'];
    }

    /**
     * Sets two_persons
     *
     * @param bool $two_persons Two persons flag
     *
     * @return $this
     */
    public function setTwoPersons($two_persons)
    {
        $this->container['two_persons'] = $two_persons;

        return $this;
    }

    /**
     * Gets controlled_substance
     *
     * @return bool
     */
    public function getControlledSubstance()
    {
        return $this->container['controlled_substance'];
    }

    /**
     * Sets controlled_substance
     *
     * @param bool $controlled_substance Controlled substance flag
     *
     * @return $this
     */
    public function setControlledSubstance($controlled_substance)
    {
        $this->container['controlled_substance'] = $controlled_substance;

        return $this;
    }

    /**
     * Gets delivery_options
     *
     * @return string
     */
    public function getDeliveryOptions()
    {
        return $this->container['delivery_options'];
    }

    /**
     * Sets delivery_options
     *
     * @param string $delivery_options Post office id for hold for pickup option
     *
     * @return $this
     */
    public function setDeliveryOptions($delivery_options)
    {
        $allowedValues = $this->getDeliveryOptionsAllowableValues();
        if (!is_null($delivery_options) && !in_array($delivery_options, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'delivery_options', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['delivery_options'] = $delivery_options;

        return $this;
    }

    /**
     * Gets origin_signature_not_required
     *
     * @return bool
     */
    public function getOriginSignatureNotRequired()
    {
        return $this->container['origin_signature_not_required'];
    }

    /**
     * Sets origin_signature_not_required
     *
     * @param bool $origin_signature_not_required OSNR (origin signature not required) (Purolator only)
     *
     * @return $this
     */
    public function setOriginSignatureNotRequired($origin_signature_not_required)
    {
        $this->container['origin_signature_not_required'] = $origin_signature_not_required;

        return $this;
    }

    /**
     * Gets lift_gate_for_pick_up_indicator
     *
     * @return bool
     */
    public function getLiftGateForPickUpIndicator()
    {
        return $this->container['lift_gate_for_pick_up_indicator'];
    }

    /**
     * Sets lift_gate_for_pick_up_indicator
     *
     * @param bool $lift_gate_for_pick_up_indicator Lift gate for pickup, limited support for LTL carriers
     *
     * @return $this
     */
    public function setLiftGateForPickUpIndicator($lift_gate_for_pick_up_indicator)
    {
        $this->container['lift_gate_for_pick_up_indicator'] = $lift_gate_for_pick_up_indicator;

        return $this;
    }

    /**
     * Gets lift_gate_for_delivery_indicator
     *
     * @return bool
     */
    public function getLiftGateForDeliveryIndicator()
    {
        return $this->container['lift_gate_for_delivery_indicator'];
    }

    /**
     * Sets lift_gate_for_delivery_indicator
     *
     * @param bool $lift_gate_for_delivery_indicator Lift gate for delivery, limited support for LTL carriers
     *
     * @return $this
     */
    public function setLiftGateForDeliveryIndicator($lift_gate_for_delivery_indicator)
    {
        $this->container['lift_gate_for_delivery_indicator'] = $lift_gate_for_delivery_indicator;

        return $this;
    }

    /**
     * Gets request_pickup
     *
     * @return bool
     */
    public function getRequestPickup()
    {
        return $this->container['request_pickup'];
    }

    /**
     * Sets request_pickup
     *
     * @param bool $request_pickup Is pickup required (option is used only if carrier plugin has pickup request implemented  and pickup mode on client settings set to 'On order (manual)'
     *
     * @return $this
     */
    public function setRequestPickup($request_pickup)
    {
        $this->container['request_pickup'] = $request_pickup;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
