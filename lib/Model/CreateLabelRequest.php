<?php
/**
 * CreateLabelRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Techship API v3
 *
 * API regions:  US: <a href='https://api-us.techship.io/api/docs/ui/index'>https://api-us.techship.io/api/docs/ui/index</a>  CA: <a href='https://api-ca.techship.io/api/docs/ui/index'>https://api-ca.techship.io/api/docs/ui/index</a>
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fulfillment\StraightShip\Client\Model;

use \ArrayAccess;
use Fulfillment\StraightShip\Client\ObjectSerializer;

/**
 * CreateLabelRequest Class Doc Comment
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateLabelRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateLabelRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tracking_number' => 'string',
        'tracking_url' => 'string',
        'extended_tracking_number' => 'string',
        'package_id' => 'int',
        'request_package_id' => 'string',
        'sscc' => 'string',
        'carton_id' => 'string',
        'package_shipping_charge' => 'double',
        'package_shipping_charge_total' => 'double',
        'package_tax1_type' => 'string',
        'package_tax1_amount' => 'double',
        'package_tax2_type' => 'string',
        'package_tax2_amount' => 'double',
        'package_tax3_type' => 'string',
        'package_tax3_amount' => 'double',
        'package_fuel_surcharge' => 'double',
        'type' => 'int',
        'label' => 'string',
        'label_page_count' => 'int',
        'label_url' => 'string',
        'purpose' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tracking_number' => null,
        'tracking_url' => null,
        'extended_tracking_number' => null,
        'package_id' => 'int32',
        'request_package_id' => null,
        'sscc' => null,
        'carton_id' => null,
        'package_shipping_charge' => 'double',
        'package_shipping_charge_total' => 'double',
        'package_tax1_type' => null,
        'package_tax1_amount' => 'double',
        'package_tax2_type' => null,
        'package_tax2_amount' => 'double',
        'package_tax3_type' => null,
        'package_tax3_amount' => 'double',
        'package_fuel_surcharge' => 'double',
        'type' => 'int32',
        'label' => null,
        'label_page_count' => 'int32',
        'label_url' => null,
        'purpose' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tracking_number' => 'TrackingNumber',
        'tracking_url' => 'TrackingUrl',
        'extended_tracking_number' => 'ExtendedTrackingNumber',
        'package_id' => 'PackageId',
        'request_package_id' => 'RequestPackageId',
        'sscc' => 'SSCC',
        'carton_id' => 'CartonId',
        'package_shipping_charge' => 'PackageShippingCharge',
        'package_shipping_charge_total' => 'PackageShippingChargeTotal',
        'package_tax1_type' => 'PackageTax1Type',
        'package_tax1_amount' => 'PackageTax1Amount',
        'package_tax2_type' => 'PackageTax2Type',
        'package_tax2_amount' => 'PackageTax2Amount',
        'package_tax3_type' => 'PackageTax3Type',
        'package_tax3_amount' => 'PackageTax3Amount',
        'package_fuel_surcharge' => 'PackageFuelSurcharge',
        'type' => 'Type',
        'label' => 'Label',
        'label_page_count' => 'LabelPageCount',
        'label_url' => 'LabelUrl',
        'purpose' => 'Purpose'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tracking_number' => 'setTrackingNumber',
        'tracking_url' => 'setTrackingUrl',
        'extended_tracking_number' => 'setExtendedTrackingNumber',
        'package_id' => 'setPackageId',
        'request_package_id' => 'setRequestPackageId',
        'sscc' => 'setSscc',
        'carton_id' => 'setCartonId',
        'package_shipping_charge' => 'setPackageShippingCharge',
        'package_shipping_charge_total' => 'setPackageShippingChargeTotal',
        'package_tax1_type' => 'setPackageTax1Type',
        'package_tax1_amount' => 'setPackageTax1Amount',
        'package_tax2_type' => 'setPackageTax2Type',
        'package_tax2_amount' => 'setPackageTax2Amount',
        'package_tax3_type' => 'setPackageTax3Type',
        'package_tax3_amount' => 'setPackageTax3Amount',
        'package_fuel_surcharge' => 'setPackageFuelSurcharge',
        'type' => 'setType',
        'label' => 'setLabel',
        'label_page_count' => 'setLabelPageCount',
        'label_url' => 'setLabelUrl',
        'purpose' => 'setPurpose'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tracking_number' => 'getTrackingNumber',
        'tracking_url' => 'getTrackingUrl',
        'extended_tracking_number' => 'getExtendedTrackingNumber',
        'package_id' => 'getPackageId',
        'request_package_id' => 'getRequestPackageId',
        'sscc' => 'getSscc',
        'carton_id' => 'getCartonId',
        'package_shipping_charge' => 'getPackageShippingCharge',
        'package_shipping_charge_total' => 'getPackageShippingChargeTotal',
        'package_tax1_type' => 'getPackageTax1Type',
        'package_tax1_amount' => 'getPackageTax1Amount',
        'package_tax2_type' => 'getPackageTax2Type',
        'package_tax2_amount' => 'getPackageTax2Amount',
        'package_tax3_type' => 'getPackageTax3Type',
        'package_tax3_amount' => 'getPackageTax3Amount',
        'package_fuel_surcharge' => 'getPackageFuelSurcharge',
        'type' => 'getType',
        'label' => 'getLabel',
        'label_page_count' => 'getLabelPageCount',
        'label_url' => 'getLabelUrl',
        'purpose' => 'getPurpose'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_1 = 1;
    const TYPE_2 = 2;
    const TYPE_3 = 3;

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_1,
            self::TYPE_2,
            self::TYPE_3,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tracking_number'] = isset($data['tracking_number']) ? $data['tracking_number'] : null;
        $this->container['tracking_url'] = isset($data['tracking_url']) ? $data['tracking_url'] : null;
        $this->container['extended_tracking_number'] = isset($data['extended_tracking_number']) ? $data['extended_tracking_number'] : null;
        $this->container['package_id'] = isset($data['package_id']) ? $data['package_id'] : null;
        $this->container['request_package_id'] = isset($data['request_package_id']) ? $data['request_package_id'] : null;
        $this->container['sscc'] = isset($data['sscc']) ? $data['sscc'] : null;
        $this->container['carton_id'] = isset($data['carton_id']) ? $data['carton_id'] : null;
        $this->container['package_shipping_charge'] = isset($data['package_shipping_charge']) ? $data['package_shipping_charge'] : null;
        $this->container['package_shipping_charge_total'] = isset($data['package_shipping_charge_total']) ? $data['package_shipping_charge_total'] : null;
        $this->container['package_tax1_type'] = isset($data['package_tax1_type']) ? $data['package_tax1_type'] : null;
        $this->container['package_tax1_amount'] = isset($data['package_tax1_amount']) ? $data['package_tax1_amount'] : null;
        $this->container['package_tax2_type'] = isset($data['package_tax2_type']) ? $data['package_tax2_type'] : null;
        $this->container['package_tax2_amount'] = isset($data['package_tax2_amount']) ? $data['package_tax2_amount'] : null;
        $this->container['package_tax3_type'] = isset($data['package_tax3_type']) ? $data['package_tax3_type'] : null;
        $this->container['package_tax3_amount'] = isset($data['package_tax3_amount']) ? $data['package_tax3_amount'] : null;
        $this->container['package_fuel_surcharge'] = isset($data['package_fuel_surcharge']) ? $data['package_fuel_surcharge'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['label_page_count'] = isset($data['label_page_count']) ? $data['label_page_count'] : null;
        $this->container['label_url'] = isset($data['label_url']) ? $data['label_url'] : null;
        $this->container['purpose'] = isset($data['purpose']) ? $data['purpose'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tracking_number
     *
     * @return string
     */
    public function getTrackingNumber()
    {
        return $this->container['tracking_number'];
    }

    /**
     * Sets tracking_number
     *
     * @param string $tracking_number Tracking number.
     *
     * @return $this
     */
    public function setTrackingNumber($tracking_number)
    {
        $this->container['tracking_number'] = $tracking_number;

        return $this;
    }

    /**
     * Gets tracking_url
     *
     * @return string
     */
    public function getTrackingUrl()
    {
        return $this->container['tracking_url'];
    }

    /**
     * Sets tracking_url
     *
     * @param string $tracking_url Tracking url (if available or configured on carrier setup).
     *
     * @return $this
     */
    public function setTrackingUrl($tracking_url)
    {
        $this->container['tracking_url'] = $tracking_url;

        return $this;
    }

    /**
     * Gets extended_tracking_number
     *
     * @return string
     */
    public function getExtendedTrackingNumber()
    {
        return $this->container['extended_tracking_number'];
    }

    /**
     * Sets extended_tracking_number
     *
     * @param string $extended_tracking_number Per package extended tracking number. Ignored on creation
     *
     * @return $this
     */
    public function setExtendedTrackingNumber($extended_tracking_number)
    {
        $this->container['extended_tracking_number'] = $extended_tracking_number;

        return $this;
    }

    /**
     * Gets package_id
     *
     * @return int
     */
    public function getPackageId()
    {
        return $this->container['package_id'];
    }

    /**
     * Sets package_id
     *
     * @param int $package_id Package Id
     *
     * @return $this
     */
    public function setPackageId($package_id)
    {
        $this->container['package_id'] = $package_id;

        return $this;
    }

    /**
     * Gets request_package_id
     *
     * @return string
     */
    public function getRequestPackageId()
    {
        return $this->container['request_package_id'];
    }

    /**
     * Sets request_package_id
     *
     * @param string $request_package_id Request package Id
     *
     * @return $this
     */
    public function setRequestPackageId($request_package_id)
    {
        $this->container['request_package_id'] = $request_package_id;

        return $this;
    }

    /**
     * Gets sscc
     *
     * @return string
     */
    public function getSscc()
    {
        return $this->container['sscc'];
    }

    /**
     * Sets sscc
     *
     * @param string $sscc Per package UCC 128 code.
     *
     * @return $this
     */
    public function setSscc($sscc)
    {
        $this->container['sscc'] = $sscc;

        return $this;
    }

    /**
     * Gets carton_id
     *
     * @return string
     */
    public function getCartonId()
    {
        return $this->container['carton_id'];
    }

    /**
     * Sets carton_id
     *
     * @param string $carton_id Per package carton id.
     *
     * @return $this
     */
    public function setCartonId($carton_id)
    {
        $this->container['carton_id'] = $carton_id;

        return $this;
    }

    /**
     * Gets package_shipping_charge
     *
     * @return double
     */
    public function getPackageShippingCharge()
    {
        return $this->container['package_shipping_charge'];
    }

    /**
     * Sets package_shipping_charge
     *
     * @param double $package_shipping_charge Per package net charge. Not availabe for some carriers. Ignored on creation
     *
     * @return $this
     */
    public function setPackageShippingCharge($package_shipping_charge)
    {
        $this->container['package_shipping_charge'] = $package_shipping_charge;

        return $this;
    }

    /**
     * Gets package_shipping_charge_total
     *
     * @return double
     */
    public function getPackageShippingChargeTotal()
    {
        return $this->container['package_shipping_charge_total'];
    }

    /**
     * Sets package_shipping_charge_total
     *
     * @param double $package_shipping_charge_total Per package total charge. Not availabe for some carriers. Ignored on creation
     *
     * @return $this
     */
    public function setPackageShippingChargeTotal($package_shipping_charge_total)
    {
        $this->container['package_shipping_charge_total'] = $package_shipping_charge_total;

        return $this;
    }

    /**
     * Gets package_tax1_type
     *
     * @return string
     */
    public function getPackageTax1Type()
    {
        return $this->container['package_tax1_type'];
    }

    /**
     * Sets package_tax1_type
     *
     * @param string $package_tax1_type Per package tax 1 type. Ignored on creation
     *
     * @return $this
     */
    public function setPackageTax1Type($package_tax1_type)
    {
        $this->container['package_tax1_type'] = $package_tax1_type;

        return $this;
    }

    /**
     * Gets package_tax1_amount
     *
     * @return double
     */
    public function getPackageTax1Amount()
    {
        return $this->container['package_tax1_amount'];
    }

    /**
     * Sets package_tax1_amount
     *
     * @param double $package_tax1_amount Per package tax 1 amount. Ignored on creation
     *
     * @return $this
     */
    public function setPackageTax1Amount($package_tax1_amount)
    {
        $this->container['package_tax1_amount'] = $package_tax1_amount;

        return $this;
    }

    /**
     * Gets package_tax2_type
     *
     * @return string
     */
    public function getPackageTax2Type()
    {
        return $this->container['package_tax2_type'];
    }

    /**
     * Sets package_tax2_type
     *
     * @param string $package_tax2_type Per package tax 2 type. Ignored on creation
     *
     * @return $this
     */
    public function setPackageTax2Type($package_tax2_type)
    {
        $this->container['package_tax2_type'] = $package_tax2_type;

        return $this;
    }

    /**
     * Gets package_tax2_amount
     *
     * @return double
     */
    public function getPackageTax2Amount()
    {
        return $this->container['package_tax2_amount'];
    }

    /**
     * Sets package_tax2_amount
     *
     * @param double $package_tax2_amount Per package tax 2 amount. Ignored on creation
     *
     * @return $this
     */
    public function setPackageTax2Amount($package_tax2_amount)
    {
        $this->container['package_tax2_amount'] = $package_tax2_amount;

        return $this;
    }

    /**
     * Gets package_tax3_type
     *
     * @return string
     */
    public function getPackageTax3Type()
    {
        return $this->container['package_tax3_type'];
    }

    /**
     * Sets package_tax3_type
     *
     * @param string $package_tax3_type Per package tax 3 type. Ignored on creation
     *
     * @return $this
     */
    public function setPackageTax3Type($package_tax3_type)
    {
        $this->container['package_tax3_type'] = $package_tax3_type;

        return $this;
    }

    /**
     * Gets package_tax3_amount
     *
     * @return double
     */
    public function getPackageTax3Amount()
    {
        return $this->container['package_tax3_amount'];
    }

    /**
     * Sets package_tax3_amount
     *
     * @param double $package_tax3_amount Per package tax 3 amount. Ignored on creation
     *
     * @return $this
     */
    public function setPackageTax3Amount($package_tax3_amount)
    {
        $this->container['package_tax3_amount'] = $package_tax3_amount;

        return $this;
    }

    /**
     * Gets package_fuel_surcharge
     *
     * @return double
     */
    public function getPackageFuelSurcharge()
    {
        return $this->container['package_fuel_surcharge'];
    }

    /**
     * Sets package_fuel_surcharge
     *
     * @param double $package_fuel_surcharge Per package fuel surcharge. Ignored on creation
     *
     * @return $this
     */
    public function setPackageFuelSurcharge($package_fuel_surcharge)
    {
        $this->container['package_fuel_surcharge'] = $package_fuel_surcharge;

        return $this;
    }

    /**
     * Gets type
     *
     * @return int
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param int $type Label type:  1 - _PDF_  2 - _ZPL_  3 - _PNG_
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label Generated label in base 64 encoding
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets label_page_count
     *
     * @return int
     */
    public function getLabelPageCount()
    {
        return $this->container['label_page_count'];
    }

    /**
     * Sets label_page_count
     *
     * @param int $label_page_count Count of pages in ZPL label only,  Provided only if configured on portal
     *
     * @return $this
     */
    public function setLabelPageCount($label_page_count)
    {
        $this->container['label_page_count'] = $label_page_count;

        return $this;
    }

    /**
     * Gets label_url
     *
     * @return string
     */
    public function getLabelUrl()
    {
        return $this->container['label_url'];
    }

    /**
     * Sets label_url
     *
     * @param string $label_url Label download url
     *
     * @return $this
     */
    public function setLabelUrl($label_url)
    {
        $this->container['label_url'] = $label_url;

        return $this;
    }

    /**
     * Gets purpose
     *
     * @return string
     */
    public function getPurpose()
    {
        return $this->container['purpose'];
    }

    /**
     * Sets purpose
     *
     * @param string $purpose Label purpose, one of the following:  _LABEL_  _RETURN LABEL_  _COMMERCIALINVOICE_  _CODREMITTANCELABEL_  _DANGEROUSGOODS_
     *
     * @return $this
     */
    public function setPurpose($purpose)
    {
        $this->container['purpose'] = $purpose;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
