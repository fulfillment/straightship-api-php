<?php
/**
 * PackageBase
 *
 * PHP version 5
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Techship API v3
 *
 * API regions:  US: <a href='https://api-us.techship.io/api/docs/ui/index'>https://api-us.techship.io/api/docs/ui/index</a>  CA: <a href='https://api-ca.techship.io/api/docs/ui/index'>https://api-ca.techship.io/api/docs/ui/index</a>
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fulfillment\StraightShip\Client\Model;

use \ArrayAccess;
use Fulfillment\StraightShip\Client\ObjectSerializer;

/**
 * PackageBase Class Doc Comment
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PackageBase implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PackageBase';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'weight' => 'double',
        'box_width' => 'double',
        'box_height' => 'double',
        'box_length' => 'double',
        'commodity_description' => 'string',
        'middle_mile_container_id' => 'string',
        'id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'weight' => 'double',
        'box_width' => 'double',
        'box_height' => 'double',
        'box_length' => 'double',
        'commodity_description' => null,
        'middle_mile_container_id' => null,
        'id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'weight' => 'Weight',
        'box_width' => 'BoxWidth',
        'box_height' => 'BoxHeight',
        'box_length' => 'BoxLength',
        'commodity_description' => 'CommodityDescription',
        'middle_mile_container_id' => 'MiddleMileContainerId',
        'id' => 'Id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'weight' => 'setWeight',
        'box_width' => 'setBoxWidth',
        'box_height' => 'setBoxHeight',
        'box_length' => 'setBoxLength',
        'commodity_description' => 'setCommodityDescription',
        'middle_mile_container_id' => 'setMiddleMileContainerId',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'weight' => 'getWeight',
        'box_width' => 'getBoxWidth',
        'box_height' => 'getBoxHeight',
        'box_length' => 'getBoxLength',
        'commodity_description' => 'getCommodityDescription',
        'middle_mile_container_id' => 'getMiddleMileContainerId',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['box_width'] = isset($data['box_width']) ? $data['box_width'] : null;
        $this->container['box_height'] = isset($data['box_height']) ? $data['box_height'] : null;
        $this->container['box_length'] = isset($data['box_length']) ? $data['box_length'] : null;
        $this->container['commodity_description'] = isset($data['commodity_description']) ? $data['commodity_description'] : null;
        $this->container['middle_mile_container_id'] = isset($data['middle_mile_container_id']) ? $data['middle_mile_container_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets weight
     *
     * @return double
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param double $weight Mandatory package net weight.
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets box_width
     *
     * @return double
     */
    public function getBoxWidth()
    {
        return $this->container['box_width'];
    }

    /**
     * Sets box_width
     *
     * @param double $box_width Optional box width
     *
     * @return $this
     */
    public function setBoxWidth($box_width)
    {
        $this->container['box_width'] = $box_width;

        return $this;
    }

    /**
     * Gets box_height
     *
     * @return double
     */
    public function getBoxHeight()
    {
        return $this->container['box_height'];
    }

    /**
     * Sets box_height
     *
     * @param double $box_height Optional box height
     *
     * @return $this
     */
    public function setBoxHeight($box_height)
    {
        $this->container['box_height'] = $box_height;

        return $this;
    }

    /**
     * Gets box_length
     *
     * @return double
     */
    public function getBoxLength()
    {
        return $this->container['box_length'];
    }

    /**
     * Sets box_length
     *
     * @param double $box_length Optional box length
     *
     * @return $this
     */
    public function setBoxLength($box_length)
    {
        $this->container['box_length'] = $box_length;

        return $this;
    }

    /**
     * Gets commodity_description
     *
     * @return string
     */
    public function getCommodityDescription()
    {
        return $this->container['commodity_description'];
    }

    /**
     * Sets commodity_description
     *
     * @param string $commodity_description Commodity description
     *
     * @return $this
     */
    public function setCommodityDescription($commodity_description)
    {
        $this->container['commodity_description'] = $commodity_description;

        return $this;
    }

    /**
     * Gets middle_mile_container_id
     *
     * @return string
     */
    public function getMiddleMileContainerId()
    {
        return $this->container['middle_mile_container_id'];
    }

    /**
     * Sets middle_mile_container_id
     *
     * @param string $middle_mile_container_id Middle mile container id associated with parcel
     *
     * @return $this
     */
    public function setMiddleMileContainerId($middle_mile_container_id)
    {
        $this->container['middle_mile_container_id'] = $middle_mile_container_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Id of object. Ignored on creation. Read/only
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
