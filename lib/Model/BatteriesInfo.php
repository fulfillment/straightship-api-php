<?php
/**
 * BatteriesInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Techship API v3
 *
 * API regions:  US: <a href='https://api-us.techship.io/api/docs/ui/index'>https://api-us.techship.io/api/docs/ui/index</a>  CA: <a href='https://api-ca.techship.io/api/docs/ui/index'>https://api-ca.techship.io/api/docs/ui/index</a>
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fulfillment\StraightShip\Client\Model;

use \ArrayAccess;
use Fulfillment\StraightShip\Client\ObjectSerializer;

/**
 * BatteriesInfo Class Doc Comment
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BatteriesInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BatteriesInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'batteries' => 'bool',
        'battery_packing_type' => 'string',
        'battery_material_type' => 'string',
        'battery_regulatory_sub_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'batteries' => null,
        'battery_packing_type' => null,
        'battery_material_type' => null,
        'battery_regulatory_sub_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'batteries' => 'Batteries',
        'battery_packing_type' => 'BatteryPackingType',
        'battery_material_type' => 'BatteryMaterialType',
        'battery_regulatory_sub_type' => 'BatteryRegulatorySubType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'batteries' => 'setBatteries',
        'battery_packing_type' => 'setBatteryPackingType',
        'battery_material_type' => 'setBatteryMaterialType',
        'battery_regulatory_sub_type' => 'setBatteryRegulatorySubType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'batteries' => 'getBatteries',
        'battery_packing_type' => 'getBatteryPackingType',
        'battery_material_type' => 'getBatteryMaterialType',
        'battery_regulatory_sub_type' => 'getBatteryRegulatorySubType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const BATTERY_PACKING_TYPE_CONTAINED_IN_EQUIPMENT = 'CONTAINED_IN_EQUIPMENT';
    const BATTERY_PACKING_TYPE_PACKED_WITH_EQUIPMENT = 'PACKED_WITH_EQUIPMENT';
    const BATTERY_PACKING_TYPE_UNKNOWN = 'UNKNOWN';
    const BATTERY_MATERIAL_TYPE_LITHIUM_ION = 'LITHIUM_ION';
    const BATTERY_MATERIAL_TYPE_LITHIUM_METAL = 'LITHIUM_METAL';
    const BATTERY_MATERIAL_TYPE_UNKNOWN = 'UNKNOWN';
    const BATTERY_REGULATORY_SUB_TYPE_IATA_SECTION_II = 'IATA_SECTION_II';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBatteryPackingTypeAllowableValues()
    {
        return [
            self::BATTERY_PACKING_TYPE_CONTAINED_IN_EQUIPMENT,
            self::BATTERY_PACKING_TYPE_PACKED_WITH_EQUIPMENT,
            self::BATTERY_PACKING_TYPE_UNKNOWN,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBatteryMaterialTypeAllowableValues()
    {
        return [
            self::BATTERY_MATERIAL_TYPE_LITHIUM_ION,
            self::BATTERY_MATERIAL_TYPE_LITHIUM_METAL,
            self::BATTERY_MATERIAL_TYPE_UNKNOWN,
        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBatteryRegulatorySubTypeAllowableValues()
    {
        return [
            self::BATTERY_REGULATORY_SUB_TYPE_IATA_SECTION_II
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['batteries'] = isset($data['batteries']) ? $data['batteries'] : null;
        $this->container['battery_packing_type'] = isset($data['battery_packing_type']) ? $data['battery_packing_type'] : null;
        $this->container['battery_material_type'] = isset($data['battery_material_type']) ? $data['battery_material_type'] : null;
        $this->container['battery_regulatory_sub_type'] = isset($data['battery_regulatory_sub_type']) ? $data['battery_regulatory_sub_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBatteryPackingTypeAllowableValues();
        if (!is_null($this->container['battery_packing_type']) && !in_array($this->container['battery_packing_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'battery_packing_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBatteryMaterialTypeAllowableValues();
        if (!is_null($this->container['battery_material_type']) && !in_array($this->container['battery_material_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'battery_material_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getBatteryRegulatorySubTypeAllowableValues();
        if (!is_null($this->container['battery_regulatory_sub_type']) && !in_array($this->container['battery_regulatory_sub_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'battery_regulatory_sub_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets batteries
     *
     * @return bool
     */
    public function getBatteries()
    {
        return $this->container['batteries'];
    }

    /**
     * Sets batteries
     *
     * @param bool $batteries Batteries flag (Fedex only)
     *
     * @return $this
     */
    public function setBatteries($batteries)
    {
        $this->container['batteries'] = $batteries;

        return $this;
    }

    /**
     * Gets battery_packing_type
     *
     * @return string
     */
    public function getBatteryPackingType()
    {
        return $this->container['battery_packing_type'];
    }

    /**
     * Sets battery_packing_type
     *
     * @param string $battery_packing_type Battery packing Type (Fedex only)
     *
     * @return $this
     */
    public function setBatteryPackingType($battery_packing_type)
    {
        $allowedValues = $this->getBatteryPackingTypeAllowableValues();
        if (!is_null($battery_packing_type) && !in_array($battery_packing_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'battery_packing_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['battery_packing_type'] = $battery_packing_type;

        return $this;
    }

    /**
     * Gets battery_material_type
     *
     * @return string
     */
    public function getBatteryMaterialType()
    {
        return $this->container['battery_material_type'];
    }

    /**
     * Sets battery_material_type
     *
     * @param string $battery_material_type Battery material type (Fedex only)
     *
     * @return $this
     */
    public function setBatteryMaterialType($battery_material_type)
    {
        $allowedValues = $this->getBatteryMaterialTypeAllowableValues();
        if (!is_null($battery_material_type) && !in_array($battery_material_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'battery_material_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['battery_material_type'] = $battery_material_type;

        return $this;
    }

    /**
     * Gets battery_regulatory_sub_type
     *
     * @return string
     */
    public function getBatteryRegulatorySubType()
    {
        return $this->container['battery_regulatory_sub_type'];
    }

    /**
     * Sets battery_regulatory_sub_type
     *
     * @param string $battery_regulatory_sub_type Battery regulatory subtype (Fedex only)
     *
     * @return $this
     */
    public function setBatteryRegulatorySubType($battery_regulatory_sub_type)
    {
        $allowedValues = $this->getBatteryRegulatorySubTypeAllowableValues();
        if (!is_null($battery_regulatory_sub_type) && !in_array($battery_regulatory_sub_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'battery_regulatory_sub_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['battery_regulatory_sub_type'] = $battery_regulatory_sub_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
