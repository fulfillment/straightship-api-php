<?php
/**
 * ManifestsApi
 * PHP version 5
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Techship API v3
 *
 * API regions:  US: <a href='https://api-us.techship.io/api/docs/ui/index'>https://api-us.techship.io/api/docs/ui/index</a>  CA: <a href='https://api-ca.techship.io/api/docs/ui/index'>https://api-ca.techship.io/api/docs/ui/index</a>
 *
 * OpenAPI spec version: V3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.61
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Fulfillment\StraightShip\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Fulfillment\StraightShip\Client\ApiException;
use Fulfillment\StraightShip\Client\Configuration;
use Fulfillment\StraightShip\Client\HeaderSelector;
use Fulfillment\StraightShip\Client\ObjectSerializer;
use Fulfillment\StraightShip\Client\Model\ValidateTrackingInfo;
use Fulfillment\StraightShip\Client\Model\Manifest;

/**
 * ManifestsApi Class Doc Comment
 *
 * @category Class
 * @package  namespace Fulfillment\StraightShip\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ManifestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation finalizeManifest
     *
     * Finalize manifest
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $pars_number pars_number (optional)
     * @param  bool $sync Synchronous finalize (optional, default to false)
     * @param  bool $split_validated Split validated (optional, default to false)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Fulfillment\StraightShip\Client\Model\Manifest
     */
    public function finalizeManifest($manifest_id, $pars_number = null, $sync = 'false', $split_validated = 'false')
    {
        list($response) = $this->finalizeManifestWithHttpInfo($manifest_id, $pars_number, $sync, $split_validated);
        return $response;
    }

    /**
     * Operation finalizeManifestWithHttpInfo
     *
     * Finalize manifest
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $pars_number (optional)
     * @param  bool $sync Synchronous finalize (optional, default to false)
     * @param  bool $split_validated Split validated (optional, default to false)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of Fulfillment\StraightShip\Client\Model\Manifest, HTTP status code, HTTP response headers (array of strings)
     */
    public function finalizeManifestWithHttpInfo($manifest_id, $pars_number = null, $sync = 'false', $split_validated = 'false')
    {
        $returnType = Manifest::class;
        $request = $this->finalizeManifestRequest($manifest_id, $pars_number, $sync, $split_validated);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        Manifest::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation finalizeManifestAsync
     *
     * Finalize manifest
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $pars_number (optional)
     * @param  bool $sync Synchronous finalize (optional, default to false)
     * @param  bool $split_validated Split validated (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function finalizeManifestAsync($manifest_id, $pars_number = null, $sync = 'false', $split_validated = 'false')
    {
        return $this->finalizeManifestAsyncWithHttpInfo($manifest_id, $pars_number, $sync, $split_validated)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation finalizeManifestAsyncWithHttpInfo
     *
     * Finalize manifest
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $pars_number (optional)
     * @param  bool $sync Synchronous finalize (optional, default to false)
     * @param  bool $split_validated Split validated (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function finalizeManifestAsyncWithHttpInfo($manifest_id, $pars_number = null, $sync = 'false', $split_validated = 'false')
    {
        $returnType = Manifest::class;
        $request = $this->finalizeManifestRequest($manifest_id, $pars_number, $sync, $split_validated);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'finalizeManifest'
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $pars_number (optional)
     * @param  bool $sync Synchronous finalize (optional, default to false)
     * @param  bool $split_validated Split validated (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function finalizeManifestRequest($manifest_id, $pars_number = null, $sync = 'false', $split_validated = 'false')
    {
        // verify the required parameter 'manifest_id' is set
        if ($manifest_id === null || (is_array($manifest_id) && count($manifest_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manifest_id when calling finalizeManifest'
            );
        }

        $resourcePath = '/api/v3/manifests/finalize/{manifestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($pars_number !== null) {
            $queryParams['parsNumber'] = ObjectSerializer::toQueryValue($pars_number, null);
        }
        // query params
        if ($sync !== null) {
            $queryParams['sync'] = ObjectSerializer::toQueryValue($sync, null);
        }
        // query params
        if ($split_validated !== null) {
            $queryParams['splitValidated'] = ObjectSerializer::toQueryValue($split_validated, null);
        }

        // path params
        if ($manifest_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manifestId' . '}',
                ObjectSerializer::toPathValue($manifest_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-secret-key');
        if ($apiKey !== null) {
            $headers['x-secret-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getManifest
     *
     * Get manifest
     *
     * @param  string $manifest_id Manifest id (required)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Fulfillment\StraightShip\Client\Model\Manifest
     */
    public function getManifest($manifest_id)
    {
        list($response) = $this->getManifestWithHttpInfo($manifest_id);
        return $response;
    }

    /**
     * Operation getManifestWithHttpInfo
     *
     * Get manifest
     *
     * @param  string $manifest_id Manifest id (required)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of Fulfillment\StraightShip\Client\Model\Manifest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getManifestWithHttpInfo($manifest_id)
    {
        $returnType = Manifest::class;
        $request = $this->getManifestRequest($manifest_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        Manifest::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getManifestAsync
     *
     * Get manifest
     *
     * @param  string $manifest_id Manifest id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManifestAsync($manifest_id)
    {
        return $this->getManifestAsyncWithHttpInfo($manifest_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getManifestAsyncWithHttpInfo
     *
     * Get manifest
     *
     * @param  string $manifest_id Manifest id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManifestAsyncWithHttpInfo($manifest_id)
    {
        $returnType = Manifest::class;
        $request = $this->getManifestRequest($manifest_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getManifest'
     *
     * @param  string $manifest_id Manifest id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getManifestRequest($manifest_id)
    {
        // verify the required parameter 'manifest_id' is set
        if ($manifest_id === null || (is_array($manifest_id) && count($manifest_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manifest_id when calling getManifest'
            );
        }

        $resourcePath = '/api/v3/manifests/{manifestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($manifest_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manifestId' . '}',
                ObjectSerializer::toPathValue($manifest_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-secret-key');
        if ($apiKey !== null) {
            $headers['x-secret-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTrackingNumbers
     *
     * Get manifest tracking numbers
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  int $page_index Page index, default 1 (required)
     * @param  int $page_size Page size, default 100 (required)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Fulfillment\StraightShip\Client\Model\TrackingNumber[]
     */
    public function listTrackingNumbers($manifest_id, $page_index, $page_size)
    {
        list($response) = $this->listTrackingNumbersWithHttpInfo($manifest_id, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation listTrackingNumbersWithHttpInfo
     *
     * Get manifest tracking numbers
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  int $page_index Page index, default 1 (required)
     * @param  int $page_size Page size, default 100 (required)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of Fulfillment\StraightShip\Client\Model\TrackingNumber[], HTTP status code, HTTP response headers (array of strings)
     */
    public function listTrackingNumbersWithHttpInfo($manifest_id, $page_index, $page_size)
    {
        $returnType = 'Fulfillment\StraightShip\Client\Model\TrackingNumber[]';
        $request = $this->listTrackingNumbersRequest($manifest_id, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'Fulfillment\StraightShip\Client\Model\TrackingNumber[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTrackingNumbersAsync
     *
     * Get manifest tracking numbers
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  int $page_index Page index, default 1 (required)
     * @param  int $page_size Page size, default 100 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrackingNumbersAsync($manifest_id, $page_index, $page_size)
    {
        return $this->listTrackingNumbersAsyncWithHttpInfo($manifest_id, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTrackingNumbersAsyncWithHttpInfo
     *
     * Get manifest tracking numbers
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  int $page_index Page index, default 1 (required)
     * @param  int $page_size Page size, default 100 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTrackingNumbersAsyncWithHttpInfo($manifest_id, $page_index, $page_size)
    {
        $returnType = 'Fulfillment\StraightShip\Client\Model\TrackingNumber[]';
        $request = $this->listTrackingNumbersRequest($manifest_id, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTrackingNumbers'
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  int $page_index Page index, default 1 (required)
     * @param  int $page_size Page size, default 100 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTrackingNumbersRequest($manifest_id, $page_index, $page_size)
    {
        // verify the required parameter 'manifest_id' is set
        if ($manifest_id === null || (is_array($manifest_id) && count($manifest_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manifest_id when calling listTrackingNumbers'
            );
        }
        // verify the required parameter 'page_index' is set
        if ($page_index === null || (is_array($page_index) && count($page_index) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_index when calling listTrackingNumbers'
            );
        }
        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling listTrackingNumbers'
            );
        }

        $resourcePath = '/api/v3/manifests/listtrackingnumbers/{manifestId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_index !== null) {
            $queryParams['pageIndex'] = ObjectSerializer::toQueryValue($page_index, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }

        // path params
        if ($manifest_id !== null) {
            $resourcePath = str_replace(
                '{' . 'manifestId' . '}',
                ObjectSerializer::toPathValue($manifest_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-secret-key');
        if ($apiKey !== null) {
            $headers['x-secret-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchManifests
     *
     * Get manifest tracking numbers
     *
     * @param  string $start_date_time Manifest close start date (required)
     * @param  string $end_date_time Manifest close end date (required)
     * @param  int $page_index Page index, default 1 (required)
     * @param  int $page_size Page size, default 100 (required)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Fulfillment\StraightShip\Client\Model\Manifest[]
     */
    public function searchManifests($start_date_time, $end_date_time, $page_index, $page_size)
    {
        list($response) = $this->searchManifestsWithHttpInfo($start_date_time, $end_date_time, $page_index, $page_size);
        return $response;
    }

    /**
     * Operation searchManifestsWithHttpInfo
     *
     * Get manifest tracking numbers
     *
     * @param  string $start_date_time Manifest close start date (required)
     * @param  string $end_date_time Manifest close end date (required)
     * @param  int $page_index Page index, default 1 (required)
     * @param  int $page_size Page size, default 100 (required)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of Fulfillment\StraightShip\Client\Model\Manifest[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchManifestsWithHttpInfo($start_date_time, $end_date_time, $page_index, $page_size)
    {
        $returnType = 'Fulfillment\StraightShip\Client\Model\Manifest[]';
        $request = $this->searchManifestsRequest($start_date_time, $end_date_time, $page_index, $page_size);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'Fulfillment\StraightShip\Client\Model\Manifest[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchManifestsAsync
     *
     * Get manifest tracking numbers
     *
     * @param  string $start_date_time Manifest close start date (required)
     * @param  string $end_date_time Manifest close end date (required)
     * @param  int $page_index Page index, default 1 (required)
     * @param  int $page_size Page size, default 100 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchManifestsAsync($start_date_time, $end_date_time, $page_index, $page_size)
    {
        return $this->searchManifestsAsyncWithHttpInfo($start_date_time, $end_date_time, $page_index, $page_size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchManifestsAsyncWithHttpInfo
     *
     * Get manifest tracking numbers
     *
     * @param  string $start_date_time Manifest close start date (required)
     * @param  string $end_date_time Manifest close end date (required)
     * @param  int $page_index Page index, default 1 (required)
     * @param  int $page_size Page size, default 100 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchManifestsAsyncWithHttpInfo($start_date_time, $end_date_time, $page_index, $page_size)
    {
        $returnType = 'Fulfillment\StraightShip\Client\Model\Manifest[]';
        $request = $this->searchManifestsRequest($start_date_time, $end_date_time, $page_index, $page_size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchManifests'
     *
     * @param  string $start_date_time Manifest close start date (required)
     * @param  string $end_date_time Manifest close end date (required)
     * @param  int $page_index Page index, default 1 (required)
     * @param  int $page_size Page size, default 100 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchManifestsRequest($start_date_time, $end_date_time, $page_index, $page_size)
    {
        // verify the required parameter 'start_date_time' is set
        if ($start_date_time === null || (is_array($start_date_time) && count($start_date_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date_time when calling searchManifests'
            );
        }
        // verify the required parameter 'end_date_time' is set
        if ($end_date_time === null || (is_array($end_date_time) && count($end_date_time) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date_time when calling searchManifests'
            );
        }
        // verify the required parameter 'page_index' is set
        if ($page_index === null || (is_array($page_index) && count($page_index) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_index when calling searchManifests'
            );
        }
        // verify the required parameter 'page_size' is set
        if ($page_size === null || (is_array($page_size) && count($page_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $page_size when calling searchManifests'
            );
        }

        $resourcePath = '/api/v3/manifests/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date_time !== null) {
            $queryParams['startDateTime'] = ObjectSerializer::toQueryValue($start_date_time, null);
        }
        // query params
        if ($end_date_time !== null) {
            $queryParams['endDateTime'] = ObjectSerializer::toQueryValue($end_date_time, null);
        }
        // query params
        if ($page_index !== null) {
            $queryParams['pageIndex'] = ObjectSerializer::toQueryValue($page_index, 'int32');
        }
        // query params
        if ($page_size !== null) {
            $queryParams['pageSize'] = ObjectSerializer::toQueryValue($page_size, 'int32');
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-secret-key');
        if ($apiKey !== null) {
            $headers['x-secret-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateTrackingNumber
     *
     * Validate tracking number
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $tracking_number Tracking number (required)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function validateTrackingNumber($manifest_id, $tracking_number)
    {
        list($response) = $this->validateTrackingNumberWithHttpInfo($manifest_id, $tracking_number);
        return $response;
    }

    /**
     * Operation validateTrackingNumberWithHttpInfo
     *
     * Validate tracking number
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $tracking_number Tracking number (required)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateTrackingNumberWithHttpInfo($manifest_id, $tracking_number)
    {
        $returnType = 'bool';
        $request = $this->validateTrackingNumberRequest($manifest_id, $tracking_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateTrackingNumberAsync
     *
     * Validate tracking number
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $tracking_number Tracking number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTrackingNumberAsync($manifest_id, $tracking_number)
    {
        return $this->validateTrackingNumberAsyncWithHttpInfo($manifest_id, $tracking_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateTrackingNumberAsyncWithHttpInfo
     *
     * Validate tracking number
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $tracking_number Tracking number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTrackingNumberAsyncWithHttpInfo($manifest_id, $tracking_number)
    {
        $returnType = 'bool';
        $request = $this->validateTrackingNumberRequest($manifest_id, $tracking_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateTrackingNumber'
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $tracking_number Tracking number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateTrackingNumberRequest($manifest_id, $tracking_number)
    {
        // verify the required parameter 'manifest_id' is set
        if ($manifest_id === null || (is_array($manifest_id) && count($manifest_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manifest_id when calling validateTrackingNumber'
            );
        }
        // verify the required parameter 'tracking_number' is set
        if ($tracking_number === null || (is_array($tracking_number) && count($tracking_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracking_number when calling validateTrackingNumber'
            );
        }

        $resourcePath = '/api/v3/manifests/validatetrackingnumber';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($manifest_id !== null) {
            $queryParams['manifestId'] = ObjectSerializer::toQueryValue($manifest_id, null);
        }
        // query params
        if ($tracking_number !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($tracking_number, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-secret-key');
        if ($apiKey !== null) {
            $headers['x-secret-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateTrackingNumberExt
     *
     * Validate tracking number
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $tracking_number Tracking number (required)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Fulfillment\StraightShip\Client\Model\ValidateTrackingInfo
     */
    public function validateTrackingNumberExt($manifest_id, $tracking_number)
    {
        list($response) = $this->validateTrackingNumberExtWithHttpInfo($manifest_id, $tracking_number);
        return $response;
    }

    /**
     * Operation validateTrackingNumberExtWithHttpInfo
     *
     * Validate tracking number
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $tracking_number Tracking number (required)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of Fulfillment\StraightShip\Client\Model\ValidateTrackingInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateTrackingNumberExtWithHttpInfo($manifest_id, $tracking_number)
    {
        $returnType = ValidateTrackingInfo::class;
        $request = $this->validateTrackingNumberExtRequest($manifest_id, $tracking_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        ValidateTrackingInfo::class,
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateTrackingNumberExtAsync
     *
     * Validate tracking number
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $tracking_number Tracking number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTrackingNumberExtAsync($manifest_id, $tracking_number)
    {
        return $this->validateTrackingNumberExtAsyncWithHttpInfo($manifest_id, $tracking_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateTrackingNumberExtAsyncWithHttpInfo
     *
     * Validate tracking number
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $tracking_number Tracking number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTrackingNumberExtAsyncWithHttpInfo($manifest_id, $tracking_number)
    {
        $returnType = ValidateTrackingInfo::class;
        $request = $this->validateTrackingNumberExtRequest($manifest_id, $tracking_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateTrackingNumberExt'
     *
     * @param  string $manifest_id Manifest id (required)
     * @param  string $tracking_number Tracking number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateTrackingNumberExtRequest($manifest_id, $tracking_number)
    {
        // verify the required parameter 'manifest_id' is set
        if ($manifest_id === null || (is_array($manifest_id) && count($manifest_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $manifest_id when calling validateTrackingNumberExt'
            );
        }
        // verify the required parameter 'tracking_number' is set
        if ($tracking_number === null || (is_array($tracking_number) && count($tracking_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tracking_number when calling validateTrackingNumberExt'
            );
        }

        $resourcePath = '/api/v3/manifests/validatetrackingnumberext';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($manifest_id !== null) {
            $queryParams['manifestId'] = ObjectSerializer::toQueryValue($manifest_id, null);
        }
        // query params
        if ($tracking_number !== null) {
            $queryParams['trackingNumber'] = ObjectSerializer::toQueryValue($tracking_number, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-secret-key');
        if ($apiKey !== null) {
            $headers['x-secret-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation validateTransaction
     *
     * Validate transaction
     *
     * @param  string $transaction_number Tracking number (required)
     * @param  string $manifest_id Manifest id, optional (optional)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function validateTransaction($transaction_number, $manifest_id = null)
    {
        list($response) = $this->validateTransactionWithHttpInfo($transaction_number, $manifest_id);
        return $response;
    }

    /**
     * Operation validateTransactionWithHttpInfo
     *
     * Validate transaction
     *
     * @param  string $transaction_number Tracking number (required)
     * @param  string $manifest_id Manifest id, optional (optional)
     *
     * @throws \Fulfillment\StraightShip\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function validateTransactionWithHttpInfo($transaction_number, $manifest_id = null)
    {
        $returnType = 'bool';
        $request = $this->validateTransactionRequest($transaction_number, $manifest_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation validateTransactionAsync
     *
     * Validate transaction
     *
     * @param  string $transaction_number Tracking number (required)
     * @param  string $manifest_id Manifest id, optional (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTransactionAsync($transaction_number, $manifest_id = null)
    {
        return $this->validateTransactionAsyncWithHttpInfo($transaction_number, $manifest_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation validateTransactionAsyncWithHttpInfo
     *
     * Validate transaction
     *
     * @param  string $transaction_number Tracking number (required)
     * @param  string $manifest_id Manifest id, optional (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function validateTransactionAsyncWithHttpInfo($transaction_number, $manifest_id = null)
    {
        $returnType = 'bool';
        $request = $this->validateTransactionRequest($transaction_number, $manifest_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'validateTransaction'
     *
     * @param  string $transaction_number Tracking number (required)
     * @param  string $manifest_id Manifest id, optional (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function validateTransactionRequest($transaction_number, $manifest_id = null)
    {
        // verify the required parameter 'transaction_number' is set
        if ($transaction_number === null || (is_array($transaction_number) && count($transaction_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $transaction_number when calling validateTransaction'
            );
        }

        $resourcePath = '/api/v3/manifests/validatetransaction';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($transaction_number !== null) {
            $queryParams['transactionNumber'] = ObjectSerializer::toQueryValue($transaction_number, null);
        }
        // query params
        if ($manifest_id !== null) {
            $queryParams['manifestId'] = ObjectSerializer::toQueryValue($manifest_id, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-api-key');
        if ($apiKey !== null) {
            $headers['x-api-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('x-secret-key');
        if ($apiKey !== null) {
            $headers['x-secret-key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
